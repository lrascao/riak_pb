%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.21.1 on {{2016,6,2},{17,24,23}}
-module(riak_search_pb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2]).
-export([merge_msgs/2]).
-export([verify_msg/1]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_RpbBucketProps.RpbReplMode'/1, 'enum_value_by_symbol_RpbBucketProps.RpbReplMode'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("riak_search_pb.hrl").



encode_msg(Msg) -> encode_msg(Msg, []).


encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg);
      false -> ok
    end,
    case Msg of
      #rpbmodfun{} -> e_msg_rpbmodfun(Msg);
      #rpbcommithook{} -> e_msg_rpbcommithook(Msg);
      #rpbbucketprops{} -> e_msg_rpbbucketprops(Msg);
      #rpbpair{} -> e_msg_rpbpair(Msg);
      #rpbresetbucketreq{} -> e_msg_rpbresetbucketreq(Msg);
      #rpbsearchdoc{} -> e_msg_rpbsearchdoc(Msg);
      #rpbsetbuckettypereq{} ->
	  e_msg_rpbsetbuckettypereq(Msg);
      #rpbgetbuckettypereq{} ->
	  e_msg_rpbgetbuckettypereq(Msg);
      #rpbgetserverinforesp{} ->
	  e_msg_rpbgetserverinforesp(Msg);
      #rpbsearchqueryresp{} -> e_msg_rpbsearchqueryresp(Msg);
      #rpbsearchqueryreq{} -> e_msg_rpbsearchqueryreq(Msg);
      #rpbsetbucketreq{} -> e_msg_rpbsetbucketreq(Msg);
      #rpbgetbucketreq{} -> e_msg_rpbgetbucketreq(Msg);
      #rpbauthreq{} -> e_msg_rpbauthreq(Msg);
      #rpbgetbucketresp{} -> e_msg_rpbgetbucketresp(Msg);
      #rpberrorresp{} -> e_msg_rpberrorresp(Msg)
    end.


e_msg_rpbmodfun(Msg) -> e_msg_rpbmodfun(Msg, <<>>).


e_msg_rpbmodfun(#rpbmodfun{module = F1, function = F2},
		Bin) ->
    B1 = e_type_bytes(F1, <<Bin/binary, 10>>),
    e_type_bytes(F2, <<B1/binary, 18>>).

e_msg_rpbcommithook(Msg) ->
    e_msg_rpbcommithook(Msg, <<>>).


e_msg_rpbcommithook(#rpbcommithook{modfun = F1,
				   name = F2},
		    Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		e_mfield_rpbcommithook_modfun(F1, <<Bin/binary, 10>>)
	 end,
    if F2 == undefined -> B1;
       true -> e_type_bytes(F2, <<B1/binary, 18>>)
    end.

e_msg_rpbbucketprops(Msg) ->
    e_msg_rpbbucketprops(Msg, <<>>).


e_msg_rpbbucketprops(#rpbbucketprops{n_val = F1,
				     allow_mult = F2, last_write_wins = F3,
				     precommit = F4, has_precommit = F5,
				     postcommit = F6, has_postcommit = F7,
				     chash_keyfun = F8, linkfun = F9,
				     old_vclock = F10, young_vclock = F11,
				     big_vclock = F12, small_vclock = F13,
				     pr = F14, r = F15, w = F16, pw = F17,
				     dw = F18, rw = F19, basic_quorum = F20,
				     notfound_ok = F21, backend = F22,
				     search = F23, repl = F24,
				     search_index = F25, datatype = F26,
				     consistent = F27, write_once = F28},
		     Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_varint(F1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_bool(F2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_bool(F3, <<B2/binary, 24>>)
	 end,
    B4 = begin
	   TrF4 = id(F4),
	   if TrF4 == [] -> B3;
	      true -> e_field_rpbbucketprops_precommit(TrF4, B3)
	   end
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_type_bool(F5, <<B4/binary, 40>>)
	 end,
    B6 = begin
	   TrF6 = id(F6),
	   if TrF6 == [] -> B5;
	      true -> e_field_rpbbucketprops_postcommit(TrF6, B5)
	   end
	 end,
    B7 = if F7 == undefined -> B6;
	    true -> e_type_bool(F7, <<B6/binary, 56>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		e_mfield_rpbbucketprops_chash_keyfun(F8,
						     <<B7/binary, 66>>)
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		e_mfield_rpbbucketprops_linkfun(F9, <<B8/binary, 74>>)
	 end,
    B10 = if F10 == undefined -> B9;
	     true -> e_varint(F10, <<B9/binary, 80>>)
	  end,
    B11 = if F11 == undefined -> B10;
	     true -> e_varint(F11, <<B10/binary, 88>>)
	  end,
    B12 = if F12 == undefined -> B11;
	     true -> e_varint(F12, <<B11/binary, 96>>)
	  end,
    B13 = if F13 == undefined -> B12;
	     true -> e_varint(F13, <<B12/binary, 104>>)
	  end,
    B14 = if F14 == undefined -> B13;
	     true -> e_varint(F14, <<B13/binary, 112>>)
	  end,
    B15 = if F15 == undefined -> B14;
	     true -> e_varint(F15, <<B14/binary, 120>>)
	  end,
    B16 = if F16 == undefined -> B15;
	     true -> e_varint(F16, <<B15/binary, 128, 1>>)
	  end,
    B17 = if F17 == undefined -> B16;
	     true -> e_varint(F17, <<B16/binary, 136, 1>>)
	  end,
    B18 = if F18 == undefined -> B17;
	     true -> e_varint(F18, <<B17/binary, 144, 1>>)
	  end,
    B19 = if F19 == undefined -> B18;
	     true -> e_varint(F19, <<B18/binary, 152, 1>>)
	  end,
    B20 = if F20 == undefined -> B19;
	     true -> e_type_bool(F20, <<B19/binary, 160, 1>>)
	  end,
    B21 = if F21 == undefined -> B20;
	     true -> e_type_bool(F21, <<B20/binary, 168, 1>>)
	  end,
    B22 = if F22 == undefined -> B21;
	     true -> e_type_bytes(F22, <<B21/binary, 178, 1>>)
	  end,
    B23 = if F23 == undefined -> B22;
	     true -> e_type_bool(F23, <<B22/binary, 184, 1>>)
	  end,
    B24 = if F24 == undefined -> B23;
	     true ->
		 'e_enum_RpbBucketProps.RpbReplMode'(F24,
						     <<B23/binary, 192, 1>>)
	  end,
    B25 = if F25 == undefined -> B24;
	     true -> e_type_bytes(F25, <<B24/binary, 202, 1>>)
	  end,
    B26 = if F26 == undefined -> B25;
	     true -> e_type_bytes(F26, <<B25/binary, 210, 1>>)
	  end,
    B27 = if F27 == undefined -> B26;
	     true -> e_type_bool(F27, <<B26/binary, 216, 1>>)
	  end,
    if F28 == undefined -> B27;
       true -> e_type_bool(F28, <<B27/binary, 224, 1>>)
    end.

e_msg_rpbpair(Msg) -> e_msg_rpbpair(Msg, <<>>).


e_msg_rpbpair(#rpbpair{key = F1, value = F2}, Bin) ->
    B1 = e_type_bytes(F1, <<Bin/binary, 10>>),
    if F2 == undefined -> B1;
       true -> e_type_bytes(F2, <<B1/binary, 18>>)
    end.

e_msg_rpbresetbucketreq(Msg) ->
    e_msg_rpbresetbucketreq(Msg, <<>>).


e_msg_rpbresetbucketreq(#rpbresetbucketreq{bucket = F1,
					   type = F2},
			Bin) ->
    B1 = e_type_bytes(F1, <<Bin/binary, 10>>),
    if F2 == undefined -> B1;
       true -> e_type_bytes(F2, <<B1/binary, 18>>)
    end.

e_msg_rpbsearchdoc(Msg) ->
    e_msg_rpbsearchdoc(Msg, <<>>).


e_msg_rpbsearchdoc(#rpbsearchdoc{fields = F1}, Bin) ->
    begin
      TrF1 = id(F1),
      if TrF1 == [] -> Bin;
	 true -> e_field_rpbsearchdoc_fields(TrF1, Bin)
      end
    end.

e_msg_rpbsetbuckettypereq(Msg) ->
    e_msg_rpbsetbuckettypereq(Msg, <<>>).


e_msg_rpbsetbuckettypereq(#rpbsetbuckettypereq{type =
						   F1,
					       props = F2},
			  Bin) ->
    B1 = e_type_bytes(F1, <<Bin/binary, 10>>),
    e_mfield_rpbsetbuckettypereq_props(F2,
				       <<B1/binary, 18>>).

e_msg_rpbgetbuckettypereq(Msg) ->
    e_msg_rpbgetbuckettypereq(Msg, <<>>).


e_msg_rpbgetbuckettypereq(#rpbgetbuckettypereq{type =
						   F1},
			  Bin) ->
    e_type_bytes(F1, <<Bin/binary, 10>>).

e_msg_rpbgetserverinforesp(Msg) ->
    e_msg_rpbgetserverinforesp(Msg, <<>>).


e_msg_rpbgetserverinforesp(#rpbgetserverinforesp{node =
						     F1,
						 server_version = F2},
			   Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_bytes(F1, <<Bin/binary, 10>>)
	 end,
    if F2 == undefined -> B1;
       true -> e_type_bytes(F2, <<B1/binary, 18>>)
    end.

e_msg_rpbsearchqueryresp(Msg) ->
    e_msg_rpbsearchqueryresp(Msg, <<>>).


e_msg_rpbsearchqueryresp(#rpbsearchqueryresp{docs = F1,
					     max_score = F2, num_found = F3},
			 Bin) ->
    B1 = begin
	   TrF1 = id(F1),
	   if TrF1 == [] -> Bin;
	      true -> e_field_rpbsearchqueryresp_docs(TrF1, Bin)
	   end
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_float(F2, <<B1/binary, 21>>)
	 end,
    if F3 == undefined -> B2;
       true -> e_varint(F3, <<B2/binary, 24>>)
    end.

e_msg_rpbsearchqueryreq(Msg) ->
    e_msg_rpbsearchqueryreq(Msg, <<>>).


e_msg_rpbsearchqueryreq(#rpbsearchqueryreq{q = F1,
					   index = F2, rows = F3, start = F4,
					   sort = F5, filter = F6, df = F7,
					   op = F8, fl = F9, presort = F10},
			Bin) ->
    B1 = e_type_bytes(F1, <<Bin/binary, 10>>),
    B2 = e_type_bytes(F2, <<B1/binary, 18>>),
    B3 = if F3 == undefined -> B2;
	    true -> e_varint(F3, <<B2/binary, 24>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_varint(F4, <<B3/binary, 32>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_type_bytes(F5, <<B4/binary, 42>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_bytes(F6, <<B5/binary, 50>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true -> e_type_bytes(F7, <<B6/binary, 58>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true -> e_type_bytes(F8, <<B7/binary, 66>>)
	 end,
    B9 = begin
	   TrF9 = id(F9),
	   if TrF9 == [] -> B8;
	      true -> e_field_rpbsearchqueryreq_fl(TrF9, B8)
	   end
	 end,
    if F10 == undefined -> B9;
       true -> e_type_bytes(F10, <<B9/binary, 82>>)
    end.

e_msg_rpbsetbucketreq(Msg) ->
    e_msg_rpbsetbucketreq(Msg, <<>>).


e_msg_rpbsetbucketreq(#rpbsetbucketreq{bucket = F1,
				       props = F2, type = F3},
		      Bin) ->
    B1 = e_type_bytes(F1, <<Bin/binary, 10>>),
    B2 = e_mfield_rpbsetbucketreq_props(F2,
					<<B1/binary, 18>>),
    if F3 == undefined -> B2;
       true -> e_type_bytes(F3, <<B2/binary, 26>>)
    end.

e_msg_rpbgetbucketreq(Msg) ->
    e_msg_rpbgetbucketreq(Msg, <<>>).


e_msg_rpbgetbucketreq(#rpbgetbucketreq{bucket = F1,
				       type = F2},
		      Bin) ->
    B1 = e_type_bytes(F1, <<Bin/binary, 10>>),
    if F2 == undefined -> B1;
       true -> e_type_bytes(F2, <<B1/binary, 18>>)
    end.

e_msg_rpbauthreq(Msg) -> e_msg_rpbauthreq(Msg, <<>>).


e_msg_rpbauthreq(#rpbauthreq{user = F1, password = F2},
		 Bin) ->
    B1 = e_type_bytes(F1, <<Bin/binary, 10>>),
    e_type_bytes(F2, <<B1/binary, 18>>).

e_msg_rpbgetbucketresp(Msg) ->
    e_msg_rpbgetbucketresp(Msg, <<>>).


e_msg_rpbgetbucketresp(#rpbgetbucketresp{props = F1},
		       Bin) ->
    e_mfield_rpbgetbucketresp_props(F1, <<Bin/binary, 10>>).

e_msg_rpberrorresp(Msg) ->
    e_msg_rpberrorresp(Msg, <<>>).


e_msg_rpberrorresp(#rpberrorresp{errmsg = F1,
				 errcode = F2},
		   Bin) ->
    B1 = e_type_bytes(F1, <<Bin/binary, 10>>),
    e_varint(F2, <<B1/binary, 16>>).

e_mfield_rpbcommithook_modfun(Msg, Bin) ->
    SubBin = e_msg_rpbmodfun(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rpbbucketprops_precommit(Msg, Bin) ->
    SubBin = e_msg_rpbcommithook(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_rpbbucketprops_precommit([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_rpbbucketprops_precommit(id(Elem),
					     Bin2),
    e_field_rpbbucketprops_precommit(Rest, Bin3);
e_field_rpbbucketprops_precommit([], Bin) -> Bin.

e_mfield_rpbbucketprops_postcommit(Msg, Bin) ->
    SubBin = e_msg_rpbcommithook(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_rpbbucketprops_postcommit([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = e_mfield_rpbbucketprops_postcommit(id(Elem),
					      Bin2),
    e_field_rpbbucketprops_postcommit(Rest, Bin3);
e_field_rpbbucketprops_postcommit([], Bin) -> Bin.

e_mfield_rpbbucketprops_chash_keyfun(Msg, Bin) ->
    SubBin = e_msg_rpbmodfun(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rpbbucketprops_linkfun(Msg, Bin) ->
    SubBin = e_msg_rpbmodfun(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rpbsearchdoc_fields(Msg, Bin) ->
    SubBin = e_msg_rpbpair(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_rpbsearchdoc_fields([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_rpbsearchdoc_fields(id(Elem), Bin2),
    e_field_rpbsearchdoc_fields(Rest, Bin3);
e_field_rpbsearchdoc_fields([], Bin) -> Bin.

e_mfield_rpbsetbuckettypereq_props(Msg, Bin) ->
    SubBin = e_msg_rpbbucketprops(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rpbsearchqueryresp_docs(Msg, Bin) ->
    SubBin = e_msg_rpbsearchdoc(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_rpbsearchqueryresp_docs([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_rpbsearchqueryresp_docs(id(Elem), Bin2),
    e_field_rpbsearchqueryresp_docs(Rest, Bin3);
e_field_rpbsearchqueryresp_docs([], Bin) -> Bin.

e_field_rpbsearchqueryreq_fl([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 74>>,
    Bin3 = e_type_bytes(id(Elem), Bin2),
    e_field_rpbsearchqueryreq_fl(Rest, Bin3);
e_field_rpbsearchqueryreq_fl([], Bin) -> Bin.

e_mfield_rpbsetbucketreq_props(Msg, Bin) ->
    SubBin = e_msg_rpbbucketprops(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rpbgetbucketresp_props(Msg, Bin) ->
    SubBin = e_msg_rpbbucketprops(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.



'e_enum_RpbBucketProps.RpbReplMode'('FALSE', Bin) ->
    <<Bin/binary, 0>>;
'e_enum_RpbBucketProps.RpbReplMode'('REALTIME', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_RpbBucketProps.RpbReplMode'('FULLSYNC', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_RpbBucketProps.RpbReplMode'('TRUE', Bin) ->
    <<Bin/binary, 3>>.

e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>.

e_type_bytes(Bytes, Bin) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>.

e_type_float(Value, Bin) ->
    <<Bin/binary, Value:32/little-float>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    case MsgName of
      rpbmodfun -> d_msg_rpbmodfun(Bin);
      rpbcommithook -> d_msg_rpbcommithook(Bin);
      rpbbucketprops -> d_msg_rpbbucketprops(Bin);
      rpbpair -> d_msg_rpbpair(Bin);
      rpbresetbucketreq -> d_msg_rpbresetbucketreq(Bin);
      rpbsearchdoc -> d_msg_rpbsearchdoc(Bin);
      rpbsetbuckettypereq -> d_msg_rpbsetbuckettypereq(Bin);
      rpbgetbuckettypereq -> d_msg_rpbgetbuckettypereq(Bin);
      rpbgetserverinforesp -> d_msg_rpbgetserverinforesp(Bin);
      rpbsearchqueryresp -> d_msg_rpbsearchqueryresp(Bin);
      rpbsearchqueryreq -> d_msg_rpbsearchqueryreq(Bin);
      rpbsetbucketreq -> d_msg_rpbsetbucketreq(Bin);
      rpbgetbucketreq -> d_msg_rpbgetbucketreq(Bin);
      rpbauthreq -> d_msg_rpbauthreq(Bin);
      rpbgetbucketresp -> d_msg_rpbgetbucketresp(Bin);
      rpberrorresp -> d_msg_rpberrorresp(Bin)
    end.



d_msg_rpbmodfun(Bin) ->
    dfp_read_field_def_rpbmodfun(Bin, 0, 0, id(undefined),
				 id(undefined)).

dfp_read_field_def_rpbmodfun(<<10, Rest/binary>>, Z1,
			     Z2, F1, F2) ->
    d_field_rpbmodfun_module(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_rpbmodfun(<<18, Rest/binary>>, Z1,
			     Z2, F1, F2) ->
    d_field_rpbmodfun_function(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_rpbmodfun(<<>>, 0, 0, F1, F2) ->
    #rpbmodfun{module = F1, function = F2};
dfp_read_field_def_rpbmodfun(Other, Z1, Z2, F1, F2) ->
    dg_read_field_def_rpbmodfun(Other, Z1, Z2, F1, F2).

dg_read_field_def_rpbmodfun(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_rpbmodfun(Rest, N + 7, X bsl N + Acc,
				F1, F2);
dg_read_field_def_rpbmodfun(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_rpbmodfun_module(Rest, 0, 0, F1, F2);
      18 -> d_field_rpbmodfun_function(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_rpbmodfun(Rest, 0, 0, F1, F2);
	    1 -> skip_64_rpbmodfun(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_rpbmodfun(Rest, 0, 0, F1, F2);
	    5 -> skip_32_rpbmodfun(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_rpbmodfun(<<>>, 0, 0, F1, F2) ->
    #rpbmodfun{module = F1, function = F2}.

d_field_rpbmodfun_module(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2)
    when N < 57 ->
    d_field_rpbmodfun_module(Rest, N + 7, X bsl N + Acc, F1,
			     F2);
d_field_rpbmodfun_module(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbmodfun(Rest2, 0, 0, NewFValue,
				 F2).


d_field_rpbmodfun_function(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2)
    when N < 57 ->
    d_field_rpbmodfun_function(Rest, N + 7, X bsl N + Acc,
			       F1, F2);
d_field_rpbmodfun_function(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbmodfun(Rest2, 0, 0, F1,
				 NewFValue).


skip_varint_rpbmodfun(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2) ->
    skip_varint_rpbmodfun(Rest, Z1, Z2, F1, F2);
skip_varint_rpbmodfun(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2) ->
    dfp_read_field_def_rpbmodfun(Rest, Z1, Z2, F1, F2).


skip_length_delimited_rpbmodfun(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_rpbmodfun(Rest, N + 7,
				    X bsl N + Acc, F1, F2);
skip_length_delimited_rpbmodfun(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbmodfun(Rest2, 0, 0, F1, F2).


skip_32_rpbmodfun(<<_:32, Rest/binary>>, Z1, Z2, F1,
		  F2) ->
    dfp_read_field_def_rpbmodfun(Rest, Z1, Z2, F1, F2).


skip_64_rpbmodfun(<<_:64, Rest/binary>>, Z1, Z2, F1,
		  F2) ->
    dfp_read_field_def_rpbmodfun(Rest, Z1, Z2, F1, F2).


d_msg_rpbcommithook(Bin) ->
    dfp_read_field_def_rpbcommithook(Bin, 0, 0,
				     id(undefined), id(undefined)).

dfp_read_field_def_rpbcommithook(<<10, Rest/binary>>,
				 Z1, Z2, F1, F2) ->
    d_field_rpbcommithook_modfun(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_rpbcommithook(<<18, Rest/binary>>,
				 Z1, Z2, F1, F2) ->
    d_field_rpbcommithook_name(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_rpbcommithook(<<>>, 0, 0, F1, F2) ->
    #rpbcommithook{modfun = F1, name = F2};
dfp_read_field_def_rpbcommithook(Other, Z1, Z2, F1,
				 F2) ->
    dg_read_field_def_rpbcommithook(Other, Z1, Z2, F1, F2).

dg_read_field_def_rpbcommithook(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_rpbcommithook(Rest, N + 7,
				    X bsl N + Acc, F1, F2);
dg_read_field_def_rpbcommithook(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_rpbcommithook_modfun(Rest, 0, 0, F1, F2);
      18 -> d_field_rpbcommithook_name(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_rpbcommithook(Rest, 0, 0, F1, F2);
	    1 -> skip_64_rpbcommithook(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_rpbcommithook(Rest, 0, 0, F1, F2);
	    5 -> skip_32_rpbcommithook(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_rpbcommithook(<<>>, 0, 0, F1, F2) ->
    #rpbcommithook{modfun = F1, name = F2}.

d_field_rpbcommithook_modfun(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2)
    when N < 57 ->
    d_field_rpbcommithook_modfun(Rest, N + 7, X bsl N + Acc,
				 F1, F2);
d_field_rpbcommithook_modfun(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_rpbmodfun(Bs),
    dfp_read_field_def_rpbcommithook(Rest2, 0, 0,
				     if F1 == undefined -> NewFValue;
					true ->
					    merge_msg_rpbmodfun(F1, NewFValue)
				     end,
				     F2).


d_field_rpbcommithook_name(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2)
    when N < 57 ->
    d_field_rpbcommithook_name(Rest, N + 7, X bsl N + Acc,
			       F1, F2);
d_field_rpbcommithook_name(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbcommithook(Rest2, 0, 0, F1,
				     NewFValue).


skip_varint_rpbcommithook(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2) ->
    skip_varint_rpbcommithook(Rest, Z1, Z2, F1, F2);
skip_varint_rpbcommithook(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2) ->
    dfp_read_field_def_rpbcommithook(Rest, Z1, Z2, F1, F2).


skip_length_delimited_rpbcommithook(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_rpbcommithook(Rest, N + 7,
					X bsl N + Acc, F1, F2);
skip_length_delimited_rpbcommithook(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbcommithook(Rest2, 0, 0, F1, F2).


skip_32_rpbcommithook(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2) ->
    dfp_read_field_def_rpbcommithook(Rest, Z1, Z2, F1, F2).


skip_64_rpbcommithook(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2) ->
    dfp_read_field_def_rpbcommithook(Rest, Z1, Z2, F1, F2).


d_msg_rpbbucketprops(Bin) ->
    dfp_read_field_def_rpbbucketprops(Bin, 0, 0,
				      id(undefined), id(undefined),
				      id(undefined), id([]), id(undefined),
				      id([]), id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined)).

dfp_read_field_def_rpbbucketprops(<<8, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    d_field_rpbbucketprops_n_val(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, F18, F19, F20, F21, F22,
				 F23, F24, F25, F26, F27, F28);
dfp_read_field_def_rpbbucketprops(<<16, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    d_field_rpbbucketprops_allow_mult(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28);
dfp_read_field_def_rpbbucketprops(<<24, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    d_field_rpbbucketprops_last_write_wins(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, F13, F14, F15, F16, F17,
					   F18, F19, F20, F21, F22, F23, F24,
					   F25, F26, F27, F28);
dfp_read_field_def_rpbbucketprops(<<34, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    d_field_rpbbucketprops_precommit(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16, F17, F18, F19, F20,
				     F21, F22, F23, F24, F25, F26, F27, F28);
dfp_read_field_def_rpbbucketprops(<<40, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    d_field_rpbbucketprops_has_precommit(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, F12, F13, F14, F15, F16, F17, F18,
					 F19, F20, F21, F22, F23, F24, F25, F26,
					 F27, F28);
dfp_read_field_def_rpbbucketprops(<<50, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    d_field_rpbbucketprops_postcommit(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28);
dfp_read_field_def_rpbbucketprops(<<56, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    d_field_rpbbucketprops_has_postcommit(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, F27, F28);
dfp_read_field_def_rpbbucketprops(<<66, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    d_field_rpbbucketprops_chash_keyfun(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, F20, F21, F22, F23, F24, F25, F26,
					F27, F28);
dfp_read_field_def_rpbbucketprops(<<74, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    d_field_rpbbucketprops_linkfun(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16, F17, F18, F19, F20, F21, F22,
				   F23, F24, F25, F26, F27, F28);
dfp_read_field_def_rpbbucketprops(<<80, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    d_field_rpbbucketprops_old_vclock(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28);
dfp_read_field_def_rpbbucketprops(<<88, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    d_field_rpbbucketprops_young_vclock(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, F20, F21, F22, F23, F24, F25, F26,
					F27, F28);
dfp_read_field_def_rpbbucketprops(<<96, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    d_field_rpbbucketprops_big_vclock(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28);
dfp_read_field_def_rpbbucketprops(<<104, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    d_field_rpbbucketprops_small_vclock(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, F20, F21, F22, F23, F24, F25, F26,
					F27, F28);
dfp_read_field_def_rpbbucketprops(<<112, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    d_field_rpbbucketprops_pr(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			      F16, F17, F18, F19, F20, F21, F22, F23, F24, F25,
			      F26, F27, F28);
dfp_read_field_def_rpbbucketprops(<<120, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    d_field_rpbbucketprops_r(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			     F16, F17, F18, F19, F20, F21, F22, F23, F24, F25,
			     F26, F27, F28);
dfp_read_field_def_rpbbucketprops(<<128, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    d_field_rpbbucketprops_w(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			     F16, F17, F18, F19, F20, F21, F22, F23, F24, F25,
			     F26, F27, F28);
dfp_read_field_def_rpbbucketprops(<<136, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    d_field_rpbbucketprops_pw(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			      F16, F17, F18, F19, F20, F21, F22, F23, F24, F25,
			      F26, F27, F28);
dfp_read_field_def_rpbbucketprops(<<144, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    d_field_rpbbucketprops_dw(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			      F16, F17, F18, F19, F20, F21, F22, F23, F24, F25,
			      F26, F27, F28);
dfp_read_field_def_rpbbucketprops(<<152, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    d_field_rpbbucketprops_rw(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			      F16, F17, F18, F19, F20, F21, F22, F23, F24, F25,
			      F26, F27, F28);
dfp_read_field_def_rpbbucketprops(<<160, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    d_field_rpbbucketprops_basic_quorum(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, F20, F21, F22, F23, F24, F25, F26,
					F27, F28);
dfp_read_field_def_rpbbucketprops(<<168, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    d_field_rpbbucketprops_notfound_ok(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, F17, F18, F19,
				       F20, F21, F22, F23, F24, F25, F26, F27,
				       F28);
dfp_read_field_def_rpbbucketprops(<<178, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    d_field_rpbbucketprops_backend(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16, F17, F18, F19, F20, F21, F22,
				   F23, F24, F25, F26, F27, F28);
dfp_read_field_def_rpbbucketprops(<<184, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    d_field_rpbbucketprops_search(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, F17, F18, F19, F20, F21, F22,
				  F23, F24, F25, F26, F27, F28);
dfp_read_field_def_rpbbucketprops(<<192, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    d_field_rpbbucketprops_repl(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				F15, F16, F17, F18, F19, F20, F21, F22, F23,
				F24, F25, F26, F27, F28);
dfp_read_field_def_rpbbucketprops(<<202, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    d_field_rpbbucketprops_search_index(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, F20, F21, F22, F23, F24, F25, F26,
					F27, F28);
dfp_read_field_def_rpbbucketprops(<<210, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    d_field_rpbbucketprops_datatype(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17, F18, F19, F20, F21,
				    F22, F23, F24, F25, F26, F27, F28);
dfp_read_field_def_rpbbucketprops(<<216, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    d_field_rpbbucketprops_consistent(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28);
dfp_read_field_def_rpbbucketprops(<<224, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    d_field_rpbbucketprops_write_once(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28);
dfp_read_field_def_rpbbucketprops(<<>>, 0, 0, F1, F2,
				  F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				  F13, F14, F15, F16, F17, F18, F19, F20, F21,
				  F22, F23, F24, F25, F26, F27, F28) ->
    #rpbbucketprops{n_val = F1, allow_mult = F2,
		    last_write_wins = F3, precommit = lists_reverse(F4),
		    has_precommit = F5, postcommit = lists_reverse(F6),
		    has_postcommit = F7, chash_keyfun = F8, linkfun = F9,
		    old_vclock = F10, young_vclock = F11, big_vclock = F12,
		    small_vclock = F13, pr = F14, r = F15, w = F16,
		    pw = F17, dw = F18, rw = F19, basic_quorum = F20,
		    notfound_ok = F21, backend = F22, search = F23,
		    repl = F24, search_index = F25, datatype = F26,
		    consistent = F27, write_once = F28};
dfp_read_field_def_rpbbucketprops(Other, Z1, Z2, F1, F2,
				  F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				  F13, F14, F15, F16, F17, F18, F19, F20, F21,
				  F22, F23, F24, F25, F26, F27, F28) ->
    dg_read_field_def_rpbbucketprops(Other, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16, F17, F18, F19, F20,
				     F21, F22, F23, F24, F25, F26, F27, F28).

dg_read_field_def_rpbbucketprops(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18,
				 F19, F20, F21, F22, F23, F24, F25, F26, F27,
				 F28)
    when N < 32 - 7 ->
    dg_read_field_def_rpbbucketprops(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14, F15, F16,
				     F17, F18, F19, F20, F21, F22, F23, F24,
				     F25, F26, F27, F28);
dg_read_field_def_rpbbucketprops(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18,
				 F19, F20, F21, F22, F23, F24, F25, F26, F27,
				 F28) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rpbbucketprops_n_val(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10, F11, F12, F13,
				       F14, F15, F16, F17, F18, F19, F20, F21,
				       F22, F23, F24, F25, F26, F27, F28);
      16 ->
	  d_field_rpbbucketprops_allow_mult(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19, F20, F21, F22, F23, F24,
					    F25, F26, F27, F28);
      24 ->
	  d_field_rpbbucketprops_last_write_wins(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13, F14, F15,
						 F16, F17, F18, F19, F20, F21,
						 F22, F23, F24, F25, F26, F27,
						 F28);
      34 ->
	  d_field_rpbbucketprops_precommit(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12, F13, F14, F15, F16, F17, F18,
					   F19, F20, F21, F22, F23, F24, F25,
					   F26, F27, F28);
      40 ->
	  d_field_rpbbucketprops_has_precommit(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       F11, F12, F13, F14, F15, F16,
					       F17, F18, F19, F20, F21, F22,
					       F23, F24, F25, F26, F27, F28);
      50 ->
	  d_field_rpbbucketprops_postcommit(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19, F20, F21, F22, F23, F24,
					    F25, F26, F27, F28);
      56 ->
	  d_field_rpbbucketprops_has_postcommit(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10, F11, F12, F13, F14, F15,
						F16, F17, F18, F19, F20, F21,
						F22, F23, F24, F25, F26, F27,
						F28);
      66 ->
	  d_field_rpbbucketprops_chash_keyfun(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, F20, F21, F22, F23, F24,
					      F25, F26, F27, F28);
      74 ->
	  d_field_rpbbucketprops_linkfun(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11, F12,
					 F13, F14, F15, F16, F17, F18, F19, F20,
					 F21, F22, F23, F24, F25, F26, F27,
					 F28);
      80 ->
	  d_field_rpbbucketprops_old_vclock(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19, F20, F21, F22, F23, F24,
					    F25, F26, F27, F28);
      88 ->
	  d_field_rpbbucketprops_young_vclock(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, F20, F21, F22, F23, F24,
					      F25, F26, F27, F28);
      96 ->
	  d_field_rpbbucketprops_big_vclock(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19, F20, F21, F22, F23, F24,
					    F25, F26, F27, F28);
      104 ->
	  d_field_rpbbucketprops_small_vclock(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, F20, F21, F22, F23, F24,
					      F25, F26, F27, F28);
      112 ->
	  d_field_rpbbucketprops_pr(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				    F15, F16, F17, F18, F19, F20, F21, F22, F23,
				    F24, F25, F26, F27, F28);
      120 ->
	  d_field_rpbbucketprops_r(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				   F16, F17, F18, F19, F20, F21, F22, F23, F24,
				   F25, F26, F27, F28);
      128 ->
	  d_field_rpbbucketprops_w(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				   F16, F17, F18, F19, F20, F21, F22, F23, F24,
				   F25, F26, F27, F28);
      136 ->
	  d_field_rpbbucketprops_pw(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				    F15, F16, F17, F18, F19, F20, F21, F22, F23,
				    F24, F25, F26, F27, F28);
      144 ->
	  d_field_rpbbucketprops_dw(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				    F15, F16, F17, F18, F19, F20, F21, F22, F23,
				    F24, F25, F26, F27, F28);
      152 ->
	  d_field_rpbbucketprops_rw(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				    F15, F16, F17, F18, F19, F20, F21, F22, F23,
				    F24, F25, F26, F27, F28);
      160 ->
	  d_field_rpbbucketprops_basic_quorum(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, F20, F21, F22, F23, F24,
					      F25, F26, F27, F28);
      168 ->
	  d_field_rpbbucketprops_notfound_ok(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11, F12, F13, F14, F15, F16, F17,
					     F18, F19, F20, F21, F22, F23, F24,
					     F25, F26, F27, F28);
      178 ->
	  d_field_rpbbucketprops_backend(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11, F12,
					 F13, F14, F15, F16, F17, F18, F19, F20,
					 F21, F22, F23, F24, F25, F26, F27,
					 F28);
      184 ->
	  d_field_rpbbucketprops_search(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, F14, F15, F16, F17, F18, F19, F20,
					F21, F22, F23, F24, F25, F26, F27, F28);
      192 ->
	  d_field_rpbbucketprops_repl(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, F8, F9, F10, F11, F12, F13,
				      F14, F15, F16, F17, F18, F19, F20, F21,
				      F22, F23, F24, F25, F26, F27, F28);
      202 ->
	  d_field_rpbbucketprops_search_index(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, F20, F21, F22, F23, F24,
					      F25, F26, F27, F28);
      210 ->
	  d_field_rpbbucketprops_datatype(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, F17, F18, F19,
					  F20, F21, F22, F23, F24, F25, F26,
					  F27, F28);
      216 ->
	  d_field_rpbbucketprops_consistent(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19, F20, F21, F22, F23, F24,
					    F25, F26, F27, F28);
      224 ->
	  d_field_rpbbucketprops_write_once(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19, F20, F21, F22, F23, F24,
					    F25, F26, F27, F28);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbbucketprops(Rest, 0, 0, F1, F2, F3, F4,
					   F5, F6, F7, F8, F9, F10, F11, F12,
					   F13, F14, F15, F16, F17, F18, F19,
					   F20, F21, F22, F23, F24, F25, F26,
					   F27, F28);
	    1 ->
		skip_64_rpbbucketprops(Rest, 0, 0, F1, F2, F3, F4, F5,
				       F6, F7, F8, F9, F10, F11, F12, F13, F14,
				       F15, F16, F17, F18, F19, F20, F21, F22,
				       F23, F24, F25, F26, F27, F28);
	    2 ->
		skip_length_delimited_rpbbucketprops(Rest, 0, 0, F1, F2,
						     F3, F4, F5, F6, F7, F8, F9,
						     F10, F11, F12, F13, F14,
						     F15, F16, F17, F18, F19,
						     F20, F21, F22, F23, F24,
						     F25, F26, F27, F28);
	    5 ->
		skip_32_rpbbucketprops(Rest, 0, 0, F1, F2, F3, F4, F5,
				       F6, F7, F8, F9, F10, F11, F12, F13, F14,
				       F15, F16, F17, F18, F19, F20, F21, F22,
				       F23, F24, F25, F26, F27, F28)
	  end
    end;
dg_read_field_def_rpbbucketprops(<<>>, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, F18, F19, F20, F21, F22,
				 F23, F24, F25, F26, F27, F28) ->
    #rpbbucketprops{n_val = F1, allow_mult = F2,
		    last_write_wins = F3, precommit = lists_reverse(F4),
		    has_precommit = F5, postcommit = lists_reverse(F6),
		    has_postcommit = F7, chash_keyfun = F8, linkfun = F9,
		    old_vclock = F10, young_vclock = F11, big_vclock = F12,
		    small_vclock = F13, pr = F14, r = F15, w = F16,
		    pw = F17, dw = F18, rw = F19, basic_quorum = F20,
		    notfound_ok = F21, backend = F22, search = F23,
		    repl = F24, search_index = F25, datatype = F26,
		    consistent = F27, write_once = F28}.

d_field_rpbbucketprops_n_val(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			     F21, F22, F23, F24, F25, F26, F27, F28)
    when N < 57 ->
    d_field_rpbbucketprops_n_val(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				 F12, F13, F14, F15, F16, F17, F18, F19, F20,
				 F21, F22, F23, F24, F25, F26, F27, F28);
d_field_rpbbucketprops_n_val(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			     F21, F22, F23, F24, F25, F26, F27, F28) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, NewFValue,
				      F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				      F12, F13, F14, F15, F16, F17, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28).


d_field_rpbbucketprops_allow_mult(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28)
    when N < 57 ->
    d_field_rpbbucketprops_allow_mult(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28);
d_field_rpbbucketprops_allow_mult(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, _, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1,
				      NewFValue, F3, F4, F5, F6, F7, F8, F9,
				      F10, F11, F12, F13, F14, F15, F16, F17,
				      F18, F19, F20, F21, F22, F23, F24, F25,
				      F26, F27, F28).


d_field_rpbbucketprops_last_write_wins(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16,
				       F17, F18, F19, F20, F21, F22, F23, F24,
				       F25, F26, F27, F28)
    when N < 57 ->
    d_field_rpbbucketprops_last_write_wins(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10, F11, F12, F13,
					   F14, F15, F16, F17, F18, F19, F20,
					   F21, F22, F23, F24, F25, F26, F27,
					   F28);
d_field_rpbbucketprops_last_write_wins(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, _, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16,
				       F17, F18, F19, F20, F21, F22, F23, F24,
				       F25, F26, F27, F28) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      NewFValue, F4, F5, F6, F7, F8, F9, F10,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27, F28).


d_field_rpbbucketprops_precommit(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18,
				 F19, F20, F21, F22, F23, F24, F25, F26, F27,
				 F28)
    when N < 57 ->
    d_field_rpbbucketprops_precommit(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14, F15, F16,
				     F17, F18, F19, F20, F21, F22, F23, F24,
				     F25, F26, F27, F28);
d_field_rpbbucketprops_precommit(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18,
				 F19, F20, F21, F22, F23, F24, F25, F26, F27,
				 F28) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_rpbcommithook(Bs),
    dfp_read_field_def_rpbbucketprops(Rest2, 0, 0, F1, F2,
				      F3, cons(NewFValue, F4), F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28).


d_field_rpbbucketprops_has_precommit(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, F24, F25,
				     F26, F27, F28)
    when N < 57 ->
    d_field_rpbbucketprops_has_precommit(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12, F13, F14,
					 F15, F16, F17, F18, F19, F20, F21, F22,
					 F23, F24, F25, F26, F27, F28);
d_field_rpbbucketprops_has_precommit(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, _, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, F24, F25,
				     F26, F27, F28) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, NewFValue, F6, F7, F8, F9, F10,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27, F28).


d_field_rpbbucketprops_postcommit(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28)
    when N < 57 ->
    d_field_rpbbucketprops_postcommit(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28);
d_field_rpbbucketprops_postcommit(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_rpbcommithook(Bs),
    dfp_read_field_def_rpbbucketprops(Rest2, 0, 0, F1, F2,
				      F3, F4, F5, cons(NewFValue, F6), F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28).


d_field_rpbbucketprops_has_postcommit(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28)
    when N < 57 ->
    d_field_rpbbucketprops_has_postcommit(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, F11, F12, F13, F14,
					  F15, F16, F17, F18, F19, F20, F21,
					  F22, F23, F24, F25, F26, F27, F28);
d_field_rpbbucketprops_has_postcommit(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, _, F8, F9,
				      F10, F11, F12, F13, F14, F15, F16, F17,
				      F18, F19, F20, F21, F22, F23, F24, F25,
				      F26, F27, F28) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, NewFValue, F8, F9, F10,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27, F28).


d_field_rpbbucketprops_chash_keyfun(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28)
    when N < 57 ->
    d_field_rpbbucketprops_chash_keyfun(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26, F27, F28);
d_field_rpbbucketprops_chash_keyfun(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_rpbmodfun(Bs),
    dfp_read_field_def_rpbbucketprops(Rest2, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7,
				      if F8 == undefined -> NewFValue;
					 true ->
					     merge_msg_rpbmodfun(F8, NewFValue)
				      end,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28).


d_field_rpbbucketprops_linkfun(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			       F21, F22, F23, F24, F25, F26, F27, F28)
    when N < 57 ->
    d_field_rpbbucketprops_linkfun(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, F12, F13, F14, F15, F16,
				   F17, F18, F19, F20, F21, F22, F23, F24, F25,
				   F26, F27, F28);
d_field_rpbbucketprops_linkfun(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			       F21, F22, F23, F24, F25, F26, F27, F28) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_rpbmodfun(Bs),
    dfp_read_field_def_rpbbucketprops(Rest2, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8,
				      if F9 == undefined -> NewFValue;
					 true ->
					     merge_msg_rpbmodfun(F9, NewFValue)
				      end,
				      F10, F11, F12, F13, F14, F15, F16, F17,
				      F18, F19, F20, F21, F22, F23, F24, F25,
				      F26, F27, F28).


d_field_rpbbucketprops_old_vclock(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28)
    when N < 57 ->
    d_field_rpbbucketprops_old_vclock(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28);
d_field_rpbbucketprops_old_vclock(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, _,
				  F11, F12, F13, F14, F15, F16, F17, F18, F19,
				  F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, NewFValue,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27, F28).


d_field_rpbbucketprops_young_vclock(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28)
    when N < 57 ->
    d_field_rpbbucketprops_young_vclock(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26, F27, F28);
d_field_rpbbucketprops_young_vclock(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, _, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10,
				      NewFValue, F12, F13, F14, F15, F16, F17,
				      F18, F19, F20, F21, F22, F23, F24, F25,
				      F26, F27, F28).


d_field_rpbbucketprops_big_vclock(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28)
    when N < 57 ->
    d_field_rpbbucketprops_big_vclock(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28);
d_field_rpbbucketprops_big_vclock(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, _, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11,
				      NewFValue, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27, F28).


d_field_rpbbucketprops_small_vclock(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28)
    when N < 57 ->
    d_field_rpbbucketprops_small_vclock(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26, F27, F28);
d_field_rpbbucketprops_small_vclock(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, _, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      NewFValue, F14, F15, F16, F17, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28).


d_field_rpbbucketprops_pr(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, F17, F18, F19, F20, F21, F22,
			  F23, F24, F25, F26, F27, F28)
    when N < 57 ->
    d_field_rpbbucketprops_pr(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13, F14, F15, F16, F17, F18, F19, F20, F21, F22,
			      F23, F24, F25, F26, F27, F28);
d_field_rpbbucketprops_pr(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, _, F15, F16, F17, F18, F19, F20, F21, F22,
			  F23, F24, F25, F26, F27, F28) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, NewFValue, F15, F16, F17, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28).


d_field_rpbbucketprops_r(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, F17, F18, F19, F20, F21, F22, F23,
			 F24, F25, F26, F27, F28)
    when N < 57 ->
    d_field_rpbbucketprops_r(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     F14, F15, F16, F17, F18, F19, F20, F21, F22, F23,
			     F24, F25, F26, F27, F28);
d_field_rpbbucketprops_r(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, _, F16, F17, F18, F19, F20, F21, F22, F23,
			 F24, F25, F26, F27, F28) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, NewFValue, F16, F17, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28).


d_field_rpbbucketprops_w(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, F17, F18, F19, F20, F21, F22, F23,
			 F24, F25, F26, F27, F28)
    when N < 57 ->
    d_field_rpbbucketprops_w(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     F14, F15, F16, F17, F18, F19, F20, F21, F22, F23,
			     F24, F25, F26, F27, F28);
d_field_rpbbucketprops_w(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, _, F17, F18, F19, F20, F21, F22, F23,
			 F24, F25, F26, F27, F28) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, NewFValue, F17, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28).


d_field_rpbbucketprops_pw(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, F17, F18, F19, F20, F21, F22,
			  F23, F24, F25, F26, F27, F28)
    when N < 57 ->
    d_field_rpbbucketprops_pw(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13, F14, F15, F16, F17, F18, F19, F20, F21, F22,
			      F23, F24, F25, F26, F27, F28);
d_field_rpbbucketprops_pw(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, _, F18, F19, F20, F21, F22,
			  F23, F24, F25, F26, F27, F28) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, NewFValue, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28).


d_field_rpbbucketprops_dw(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, F17, F18, F19, F20, F21, F22,
			  F23, F24, F25, F26, F27, F28)
    when N < 57 ->
    d_field_rpbbucketprops_dw(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13, F14, F15, F16, F17, F18, F19, F20, F21, F22,
			      F23, F24, F25, F26, F27, F28);
d_field_rpbbucketprops_dw(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, F17, _, F19, F20, F21, F22,
			  F23, F24, F25, F26, F27, F28) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, NewFValue, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28).


d_field_rpbbucketprops_rw(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, F17, F18, F19, F20, F21, F22,
			  F23, F24, F25, F26, F27, F28)
    when N < 57 ->
    d_field_rpbbucketprops_rw(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13, F14, F15, F16, F17, F18, F19, F20, F21, F22,
			      F23, F24, F25, F26, F27, F28);
d_field_rpbbucketprops_rw(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, F17, F18, _, F20, F21, F22,
			  F23, F24, F25, F26, F27, F28) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, NewFValue,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28).


d_field_rpbbucketprops_basic_quorum(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28)
    when N < 57 ->
    d_field_rpbbucketprops_basic_quorum(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26, F27, F28);
d_field_rpbbucketprops_basic_quorum(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, _, F21, F22, F23, F24, F25, F26, F27,
				    F28) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19,
				      NewFValue, F21, F22, F23, F24, F25, F26,
				      F27, F28).


d_field_rpbbucketprops_notfound_ok(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26, F27,
				   F28)
    when N < 57 ->
    d_field_rpbbucketprops_notfound_ok(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12, F13, F14, F15,
				       F16, F17, F18, F19, F20, F21, F22, F23,
				       F24, F25, F26, F27, F28);
d_field_rpbbucketprops_notfound_ok(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, _, F22, F23, F24, F25, F26, F27,
				   F28) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      NewFValue, F22, F23, F24, F25, F26, F27,
				      F28).


d_field_rpbbucketprops_backend(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			       F21, F22, F23, F24, F25, F26, F27, F28)
    when N < 57 ->
    d_field_rpbbucketprops_backend(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, F12, F13, F14, F15, F16,
				   F17, F18, F19, F20, F21, F22, F23, F24, F25,
				   F26, F27, F28);
d_field_rpbbucketprops_backend(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			       F21, _, F23, F24, F25, F26, F27, F28) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbbucketprops(Rest2, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, NewFValue, F23, F24, F25, F26, F27,
				      F28).


d_field_rpbbucketprops_search(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			      F21, F22, F23, F24, F25, F26, F27, F28)
    when N < 57 ->
    d_field_rpbbucketprops_search(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15, F16, F17,
				  F18, F19, F20, F21, F22, F23, F24, F25, F26,
				  F27, F28);
d_field_rpbbucketprops_search(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			      F21, F22, _, F24, F25, F26, F27, F28) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, NewFValue, F24, F25, F26, F27,
				      F28).


d_field_rpbbucketprops_repl(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			    F21, F22, F23, F24, F25, F26, F27, F28)
    when N < 57 ->
    d_field_rpbbucketprops_repl(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				F12, F13, F14, F15, F16, F17, F18, F19, F20,
				F21, F22, F23, F24, F25, F26, F27, F28);
d_field_rpbbucketprops_repl(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			    F21, F22, F23, _, F25, F26, F27, F28) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_RpbBucketProps.RpbReplMode'(Tmp),
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, NewFValue, F25, F26, F27,
				      F28).


d_field_rpbbucketprops_search_index(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28)
    when N < 57 ->
    d_field_rpbbucketprops_search_index(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26, F27, F28);
d_field_rpbbucketprops_search_index(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, _, F26, F27,
				    F28) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbbucketprops(Rest2, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, NewFValue, F26, F27,
				      F28).


d_field_rpbbucketprops_datatype(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19,
				F20, F21, F22, F23, F24, F25, F26, F27, F28)
    when N < 57 ->
    d_field_rpbbucketprops_datatype(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    F17, F18, F19, F20, F21, F22, F23, F24, F25,
				    F26, F27, F28);
d_field_rpbbucketprops_datatype(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19,
				F20, F21, F22, F23, F24, F25, _, F27, F28) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbbucketprops(Rest2, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, NewFValue, F27,
				      F28).


d_field_rpbbucketprops_consistent(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28)
    when N < 57 ->
    d_field_rpbbucketprops_consistent(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28);
d_field_rpbbucketprops_consistent(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, _,
				  F28) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, NewFValue,
				      F28).


d_field_rpbbucketprops_write_once(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28)
    when N < 57 ->
    d_field_rpbbucketprops_write_once(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28);
d_field_rpbbucketprops_write_once(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  _) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27,
				      NewFValue).


skip_varint_rpbbucketprops(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			   F22, F23, F24, F25, F26, F27, F28) ->
    skip_varint_rpbbucketprops(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			       F16, F17, F18, F19, F20, F21, F22, F23, F24, F25,
			       F26, F27, F28);
skip_varint_rpbbucketprops(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			   F22, F23, F24, F25, F26, F27, F28) ->
    dfp_read_field_def_rpbbucketprops(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28).


skip_length_delimited_rpbbucketprops(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, F24, F25,
				     F26, F27, F28)
    when N < 57 ->
    skip_length_delimited_rpbbucketprops(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12, F13, F14,
					 F15, F16, F17, F18, F19, F20, F21, F22,
					 F23, F24, F25, F26, F27, F28);
skip_length_delimited_rpbbucketprops(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, F24, F25,
				     F26, F27, F28) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbbucketprops(Rest2, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28).


skip_32_rpbbucketprops(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		       F14, F15, F16, F17, F18, F19, F20, F21, F22, F23, F24,
		       F25, F26, F27, F28) ->
    dfp_read_field_def_rpbbucketprops(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28).


skip_64_rpbbucketprops(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		       F14, F15, F16, F17, F18, F19, F20, F21, F22, F23, F24,
		       F25, F26, F27, F28) ->
    dfp_read_field_def_rpbbucketprops(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28).


d_msg_rpbpair(Bin) ->
    dfp_read_field_def_rpbpair(Bin, 0, 0, id(undefined),
			       id(undefined)).

dfp_read_field_def_rpbpair(<<10, Rest/binary>>, Z1, Z2,
			   F1, F2) ->
    d_field_rpbpair_key(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_rpbpair(<<18, Rest/binary>>, Z1, Z2,
			   F1, F2) ->
    d_field_rpbpair_value(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_rpbpair(<<>>, 0, 0, F1, F2) ->
    #rpbpair{key = F1, value = F2};
dfp_read_field_def_rpbpair(Other, Z1, Z2, F1, F2) ->
    dg_read_field_def_rpbpair(Other, Z1, Z2, F1, F2).

dg_read_field_def_rpbpair(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_rpbpair(Rest, N + 7, X bsl N + Acc,
			      F1, F2);
dg_read_field_def_rpbpair(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_rpbpair_key(Rest, 0, 0, F1, F2);
      18 -> d_field_rpbpair_value(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_rpbpair(Rest, 0, 0, F1, F2);
	    1 -> skip_64_rpbpair(Rest, 0, 0, F1, F2);
	    2 -> skip_length_delimited_rpbpair(Rest, 0, 0, F1, F2);
	    5 -> skip_32_rpbpair(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_rpbpair(<<>>, 0, 0, F1, F2) ->
    #rpbpair{key = F1, value = F2}.

d_field_rpbpair_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2)
    when N < 57 ->
    d_field_rpbpair_key(Rest, N + 7, X bsl N + Acc, F1, F2);
d_field_rpbpair_key(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F2) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbpair(Rest2, 0, 0, NewFValue, F2).


d_field_rpbpair_value(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2)
    when N < 57 ->
    d_field_rpbpair_value(Rest, N + 7, X bsl N + Acc, F1,
			  F2);
d_field_rpbpair_value(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbpair(Rest2, 0, 0, F1, NewFValue).


skip_varint_rpbpair(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2) ->
    skip_varint_rpbpair(Rest, Z1, Z2, F1, F2);
skip_varint_rpbpair(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2) ->
    dfp_read_field_def_rpbpair(Rest, Z1, Z2, F1, F2).


skip_length_delimited_rpbpair(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_rpbpair(Rest, N + 7,
				  X bsl N + Acc, F1, F2);
skip_length_delimited_rpbpair(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbpair(Rest2, 0, 0, F1, F2).


skip_32_rpbpair(<<_:32, Rest/binary>>, Z1, Z2, F1,
		F2) ->
    dfp_read_field_def_rpbpair(Rest, Z1, Z2, F1, F2).


skip_64_rpbpair(<<_:64, Rest/binary>>, Z1, Z2, F1,
		F2) ->
    dfp_read_field_def_rpbpair(Rest, Z1, Z2, F1, F2).


d_msg_rpbresetbucketreq(Bin) ->
    dfp_read_field_def_rpbresetbucketreq(Bin, 0, 0,
					 id(undefined), id(undefined)).

dfp_read_field_def_rpbresetbucketreq(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, F2) ->
    d_field_rpbresetbucketreq_bucket(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_rpbresetbucketreq(<<18,
				       Rest/binary>>,
				     Z1, Z2, F1, F2) ->
    d_field_rpbresetbucketreq_type(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_rpbresetbucketreq(<<>>, 0, 0, F1,
				     F2) ->
    #rpbresetbucketreq{bucket = F1, type = F2};
dfp_read_field_def_rpbresetbucketreq(Other, Z1, Z2, F1,
				     F2) ->
    dg_read_field_def_rpbresetbucketreq(Other, Z1, Z2, F1,
					F2).

dg_read_field_def_rpbresetbucketreq(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_rpbresetbucketreq(Rest, N + 7,
					X bsl N + Acc, F1, F2);
dg_read_field_def_rpbresetbucketreq(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbresetbucketreq_bucket(Rest, 0, 0, F1, F2);
      18 ->
	  d_field_rpbresetbucketreq_type(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_rpbresetbucketreq(Rest, 0, 0, F1, F2);
	    1 -> skip_64_rpbresetbucketreq(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_rpbresetbucketreq(Rest, 0, 0, F1,
							F2);
	    5 -> skip_32_rpbresetbucketreq(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_rpbresetbucketreq(<<>>, 0, 0, F1,
				    F2) ->
    #rpbresetbucketreq{bucket = F1, type = F2}.

d_field_rpbresetbucketreq_bucket(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2)
    when N < 57 ->
    d_field_rpbresetbucketreq_bucket(Rest, N + 7,
				     X bsl N + Acc, F1, F2);
d_field_rpbresetbucketreq_bucket(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbresetbucketreq(Rest2, 0, 0,
					 NewFValue, F2).


d_field_rpbresetbucketreq_type(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2)
    when N < 57 ->
    d_field_rpbresetbucketreq_type(Rest, N + 7,
				   X bsl N + Acc, F1, F2);
d_field_rpbresetbucketreq_type(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbresetbucketreq(Rest2, 0, 0, F1,
					 NewFValue).


skip_varint_rpbresetbucketreq(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2) ->
    skip_varint_rpbresetbucketreq(Rest, Z1, Z2, F1, F2);
skip_varint_rpbresetbucketreq(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2) ->
    dfp_read_field_def_rpbresetbucketreq(Rest, Z1, Z2, F1,
					 F2).


skip_length_delimited_rpbresetbucketreq(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_rpbresetbucketreq(Rest, N + 7,
					    X bsl N + Acc, F1, F2);
skip_length_delimited_rpbresetbucketreq(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbresetbucketreq(Rest2, 0, 0, F1,
					 F2).


skip_32_rpbresetbucketreq(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2) ->
    dfp_read_field_def_rpbresetbucketreq(Rest, Z1, Z2, F1,
					 F2).


skip_64_rpbresetbucketreq(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2) ->
    dfp_read_field_def_rpbresetbucketreq(Rest, Z1, Z2, F1,
					 F2).


d_msg_rpbsearchdoc(Bin) ->
    dfp_read_field_def_rpbsearchdoc(Bin, 0, 0, id([])).

dfp_read_field_def_rpbsearchdoc(<<10, Rest/binary>>, Z1,
				Z2, F1) ->
    d_field_rpbsearchdoc_fields(Rest, Z1, Z2, F1);
dfp_read_field_def_rpbsearchdoc(<<>>, 0, 0, F1) ->
    #rpbsearchdoc{fields = lists_reverse(F1)};
dfp_read_field_def_rpbsearchdoc(Other, Z1, Z2, F1) ->
    dg_read_field_def_rpbsearchdoc(Other, Z1, Z2, F1).

dg_read_field_def_rpbsearchdoc(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_rpbsearchdoc(Rest, N + 7,
				   X bsl N + Acc, F1);
dg_read_field_def_rpbsearchdoc(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_rpbsearchdoc_fields(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_rpbsearchdoc(Rest, 0, 0, F1);
	    1 -> skip_64_rpbsearchdoc(Rest, 0, 0, F1);
	    2 -> skip_length_delimited_rpbsearchdoc(Rest, 0, 0, F1);
	    5 -> skip_32_rpbsearchdoc(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_rpbsearchdoc(<<>>, 0, 0, F1) ->
    #rpbsearchdoc{fields = lists_reverse(F1)}.

d_field_rpbsearchdoc_fields(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1)
    when N < 57 ->
    d_field_rpbsearchdoc_fields(Rest, N + 7, X bsl N + Acc,
				F1);
d_field_rpbsearchdoc_fields(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_rpbpair(Bs),
    dfp_read_field_def_rpbsearchdoc(Rest2, 0, 0,
				    cons(NewFValue, F1)).


skip_varint_rpbsearchdoc(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1) ->
    skip_varint_rpbsearchdoc(Rest, Z1, Z2, F1);
skip_varint_rpbsearchdoc(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1) ->
    dfp_read_field_def_rpbsearchdoc(Rest, Z1, Z2, F1).


skip_length_delimited_rpbsearchdoc(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_rpbsearchdoc(Rest, N + 7,
				       X bsl N + Acc, F1);
skip_length_delimited_rpbsearchdoc(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbsearchdoc(Rest2, 0, 0, F1).


skip_32_rpbsearchdoc(<<_:32, Rest/binary>>, Z1, Z2,
		     F1) ->
    dfp_read_field_def_rpbsearchdoc(Rest, Z1, Z2, F1).


skip_64_rpbsearchdoc(<<_:64, Rest/binary>>, Z1, Z2,
		     F1) ->
    dfp_read_field_def_rpbsearchdoc(Rest, Z1, Z2, F1).


d_msg_rpbsetbuckettypereq(Bin) ->
    dfp_read_field_def_rpbsetbuckettypereq(Bin, 0, 0,
					   id(undefined), id(undefined)).

dfp_read_field_def_rpbsetbuckettypereq(<<10,
					 Rest/binary>>,
				       Z1, Z2, F1, F2) ->
    d_field_rpbsetbuckettypereq_type(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_rpbsetbuckettypereq(<<18,
					 Rest/binary>>,
				       Z1, Z2, F1, F2) ->
    d_field_rpbsetbuckettypereq_props(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_rpbsetbuckettypereq(<<>>, 0, 0, F1,
				       F2) ->
    #rpbsetbuckettypereq{type = F1, props = F2};
dfp_read_field_def_rpbsetbuckettypereq(Other, Z1, Z2,
				       F1, F2) ->
    dg_read_field_def_rpbsetbuckettypereq(Other, Z1, Z2, F1,
					  F2).

dg_read_field_def_rpbsetbuckettypereq(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_rpbsetbuckettypereq(Rest, N + 7,
					  X bsl N + Acc, F1, F2);
dg_read_field_def_rpbsetbuckettypereq(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbsetbuckettypereq_type(Rest, 0, 0, F1, F2);
      18 ->
	  d_field_rpbsetbuckettypereq_props(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbsetbuckettypereq(Rest, 0, 0, F1, F2);
	    1 -> skip_64_rpbsetbuckettypereq(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_rpbsetbuckettypereq(Rest, 0, 0,
							  F1, F2);
	    5 -> skip_32_rpbsetbuckettypereq(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_rpbsetbuckettypereq(<<>>, 0, 0, F1,
				      F2) ->
    #rpbsetbuckettypereq{type = F1, props = F2}.

d_field_rpbsetbuckettypereq_type(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2)
    when N < 57 ->
    d_field_rpbsetbuckettypereq_type(Rest, N + 7,
				     X bsl N + Acc, F1, F2);
d_field_rpbsetbuckettypereq_type(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbsetbuckettypereq(Rest2, 0, 0,
					   NewFValue, F2).


d_field_rpbsetbuckettypereq_props(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2)
    when N < 57 ->
    d_field_rpbsetbuckettypereq_props(Rest, N + 7,
				      X bsl N + Acc, F1, F2);
d_field_rpbsetbuckettypereq_props(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_rpbbucketprops(Bs),
    dfp_read_field_def_rpbsetbuckettypereq(Rest2, 0, 0, F1,
					   if F2 == undefined -> NewFValue;
					      true ->
						  merge_msg_rpbbucketprops(F2,
									   NewFValue)
					   end).


skip_varint_rpbsetbuckettypereq(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2) ->
    skip_varint_rpbsetbuckettypereq(Rest, Z1, Z2, F1, F2);
skip_varint_rpbsetbuckettypereq(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2) ->
    dfp_read_field_def_rpbsetbuckettypereq(Rest, Z1, Z2, F1,
					   F2).


skip_length_delimited_rpbsetbuckettypereq(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_rpbsetbuckettypereq(Rest, N + 7,
					      X bsl N + Acc, F1, F2);
skip_length_delimited_rpbsetbuckettypereq(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbsetbuckettypereq(Rest2, 0, 0, F1,
					   F2).


skip_32_rpbsetbuckettypereq(<<_:32, Rest/binary>>, Z1,
			    Z2, F1, F2) ->
    dfp_read_field_def_rpbsetbuckettypereq(Rest, Z1, Z2, F1,
					   F2).


skip_64_rpbsetbuckettypereq(<<_:64, Rest/binary>>, Z1,
			    Z2, F1, F2) ->
    dfp_read_field_def_rpbsetbuckettypereq(Rest, Z1, Z2, F1,
					   F2).


d_msg_rpbgetbuckettypereq(Bin) ->
    dfp_read_field_def_rpbgetbuckettypereq(Bin, 0, 0,
					   id(undefined)).

dfp_read_field_def_rpbgetbuckettypereq(<<10,
					 Rest/binary>>,
				       Z1, Z2, F1) ->
    d_field_rpbgetbuckettypereq_type(Rest, Z1, Z2, F1);
dfp_read_field_def_rpbgetbuckettypereq(<<>>, 0, 0,
				       F1) ->
    #rpbgetbuckettypereq{type = F1};
dfp_read_field_def_rpbgetbuckettypereq(Other, Z1, Z2,
				       F1) ->
    dg_read_field_def_rpbgetbuckettypereq(Other, Z1, Z2,
					  F1).

dg_read_field_def_rpbgetbuckettypereq(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_rpbgetbuckettypereq(Rest, N + 7,
					  X bsl N + Acc, F1);
dg_read_field_def_rpbgetbuckettypereq(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_rpbgetbuckettypereq_type(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_rpbgetbuckettypereq(Rest, 0, 0, F1);
	    1 -> skip_64_rpbgetbuckettypereq(Rest, 0, 0, F1);
	    2 ->
		skip_length_delimited_rpbgetbuckettypereq(Rest, 0, 0,
							  F1);
	    5 -> skip_32_rpbgetbuckettypereq(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_rpbgetbuckettypereq(<<>>, 0, 0, F1) ->
    #rpbgetbuckettypereq{type = F1}.

d_field_rpbgetbuckettypereq_type(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1)
    when N < 57 ->
    d_field_rpbgetbuckettypereq_type(Rest, N + 7,
				     X bsl N + Acc, F1);
d_field_rpbgetbuckettypereq_type(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbgetbuckettypereq(Rest2, 0, 0,
					   NewFValue).


skip_varint_rpbgetbuckettypereq(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1) ->
    skip_varint_rpbgetbuckettypereq(Rest, Z1, Z2, F1);
skip_varint_rpbgetbuckettypereq(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1) ->
    dfp_read_field_def_rpbgetbuckettypereq(Rest, Z1, Z2,
					   F1).


skip_length_delimited_rpbgetbuckettypereq(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_rpbgetbuckettypereq(Rest, N + 7,
					      X bsl N + Acc, F1);
skip_length_delimited_rpbgetbuckettypereq(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbgetbuckettypereq(Rest2, 0, 0, F1).


skip_32_rpbgetbuckettypereq(<<_:32, Rest/binary>>, Z1,
			    Z2, F1) ->
    dfp_read_field_def_rpbgetbuckettypereq(Rest, Z1, Z2,
					   F1).


skip_64_rpbgetbuckettypereq(<<_:64, Rest/binary>>, Z1,
			    Z2, F1) ->
    dfp_read_field_def_rpbgetbuckettypereq(Rest, Z1, Z2,
					   F1).


d_msg_rpbgetserverinforesp(Bin) ->
    dfp_read_field_def_rpbgetserverinforesp(Bin, 0, 0,
					    id(undefined), id(undefined)).

dfp_read_field_def_rpbgetserverinforesp(<<10,
					  Rest/binary>>,
					Z1, Z2, F1, F2) ->
    d_field_rpbgetserverinforesp_node(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_rpbgetserverinforesp(<<18,
					  Rest/binary>>,
					Z1, Z2, F1, F2) ->
    d_field_rpbgetserverinforesp_server_version(Rest, Z1,
						Z2, F1, F2);
dfp_read_field_def_rpbgetserverinforesp(<<>>, 0, 0, F1,
					F2) ->
    #rpbgetserverinforesp{node = F1, server_version = F2};
dfp_read_field_def_rpbgetserverinforesp(Other, Z1, Z2,
					F1, F2) ->
    dg_read_field_def_rpbgetserverinforesp(Other, Z1, Z2,
					   F1, F2).

dg_read_field_def_rpbgetserverinforesp(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_rpbgetserverinforesp(Rest, N + 7,
					   X bsl N + Acc, F1, F2);
dg_read_field_def_rpbgetserverinforesp(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbgetserverinforesp_node(Rest, 0, 0, F1, F2);
      18 ->
	  d_field_rpbgetserverinforesp_server_version(Rest, 0, 0,
						      F1, F2);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbgetserverinforesp(Rest, 0, 0, F1, F2);
	    1 -> skip_64_rpbgetserverinforesp(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_rpbgetserverinforesp(Rest, 0, 0,
							   F1, F2);
	    5 -> skip_32_rpbgetserverinforesp(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_rpbgetserverinforesp(<<>>, 0, 0, F1,
				       F2) ->
    #rpbgetserverinforesp{node = F1, server_version = F2}.

d_field_rpbgetserverinforesp_node(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2)
    when N < 57 ->
    d_field_rpbgetserverinforesp_node(Rest, N + 7,
				      X bsl N + Acc, F1, F2);
d_field_rpbgetserverinforesp_node(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbgetserverinforesp(Rest2, 0, 0,
					    NewFValue, F2).


d_field_rpbgetserverinforesp_server_version(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2)
    when N < 57 ->
    d_field_rpbgetserverinforesp_server_version(Rest, N + 7,
						X bsl N + Acc, F1, F2);
d_field_rpbgetserverinforesp_server_version(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbgetserverinforesp(Rest2, 0, 0, F1,
					    NewFValue).


skip_varint_rpbgetserverinforesp(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2) ->
    skip_varint_rpbgetserverinforesp(Rest, Z1, Z2, F1, F2);
skip_varint_rpbgetserverinforesp(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2) ->
    dfp_read_field_def_rpbgetserverinforesp(Rest, Z1, Z2,
					    F1, F2).


skip_length_delimited_rpbgetserverinforesp(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_rpbgetserverinforesp(Rest, N + 7,
					       X bsl N + Acc, F1, F2);
skip_length_delimited_rpbgetserverinforesp(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbgetserverinforesp(Rest2, 0, 0, F1,
					    F2).


skip_32_rpbgetserverinforesp(<<_:32, Rest/binary>>, Z1,
			     Z2, F1, F2) ->
    dfp_read_field_def_rpbgetserverinforesp(Rest, Z1, Z2,
					    F1, F2).


skip_64_rpbgetserverinforesp(<<_:64, Rest/binary>>, Z1,
			     Z2, F1, F2) ->
    dfp_read_field_def_rpbgetserverinforesp(Rest, Z1, Z2,
					    F1, F2).


d_msg_rpbsearchqueryresp(Bin) ->
    dfp_read_field_def_rpbsearchqueryresp(Bin, 0, 0, id([]),
					  id(undefined), id(undefined)).

dfp_read_field_def_rpbsearchqueryresp(<<10,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3) ->
    d_field_rpbsearchqueryresp_docs(Rest, Z1, Z2, F1, F2,
				    F3);
dfp_read_field_def_rpbsearchqueryresp(<<21,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3) ->
    d_field_rpbsearchqueryresp_max_score(Rest, Z1, Z2, F1,
					 F2, F3);
dfp_read_field_def_rpbsearchqueryresp(<<24,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3) ->
    d_field_rpbsearchqueryresp_num_found(Rest, Z1, Z2, F1,
					 F2, F3);
dfp_read_field_def_rpbsearchqueryresp(<<>>, 0, 0, F1,
				      F2, F3) ->
    #rpbsearchqueryresp{docs = lists_reverse(F1),
			max_score = F2, num_found = F3};
dfp_read_field_def_rpbsearchqueryresp(Other, Z1, Z2, F1,
				      F2, F3) ->
    dg_read_field_def_rpbsearchqueryresp(Other, Z1, Z2, F1,
					 F2, F3).

dg_read_field_def_rpbsearchqueryresp(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_rpbsearchqueryresp(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3);
dg_read_field_def_rpbsearchqueryresp(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbsearchqueryresp_docs(Rest, 0, 0, F1, F2, F3);
      21 ->
	  d_field_rpbsearchqueryresp_max_score(Rest, 0, 0, F1, F2,
					       F3);
      24 ->
	  d_field_rpbsearchqueryresp_num_found(Rest, 0, 0, F1, F2,
					       F3);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbsearchqueryresp(Rest, 0, 0, F1, F2, F3);
	    1 -> skip_64_rpbsearchqueryresp(Rest, 0, 0, F1, F2, F3);
	    2 ->
		skip_length_delimited_rpbsearchqueryresp(Rest, 0, 0, F1,
							 F2, F3);
	    5 -> skip_32_rpbsearchqueryresp(Rest, 0, 0, F1, F2, F3)
	  end
    end;
dg_read_field_def_rpbsearchqueryresp(<<>>, 0, 0, F1, F2,
				     F3) ->
    #rpbsearchqueryresp{docs = lists_reverse(F1),
			max_score = F2, num_found = F3}.

d_field_rpbsearchqueryresp_docs(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_rpbsearchqueryresp_docs(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3);
d_field_rpbsearchqueryresp_docs(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_rpbsearchdoc(Bs),
    dfp_read_field_def_rpbsearchqueryresp(Rest2, 0, 0,
					  cons(NewFValue, F1), F2, F3).


d_field_rpbsearchqueryresp_max_score(<<Value:32/little-float,
				       Rest/binary>>,
				     Z1, Z2, F1, _, F3) ->
    dfp_read_field_def_rpbsearchqueryresp(Rest, Z1, Z2, F1,
					  Value, F3).


d_field_rpbsearchqueryresp_num_found(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_rpbsearchqueryresp_num_found(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3);
d_field_rpbsearchqueryresp_num_found(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, _) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbsearchqueryresp(Rest, 0, 0, F1,
					  F2, NewFValue).


skip_varint_rpbsearchqueryresp(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, F3) ->
    skip_varint_rpbsearchqueryresp(Rest, Z1, Z2, F1, F2,
				   F3);
skip_varint_rpbsearchqueryresp(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_rpbsearchqueryresp(Rest, Z1, Z2, F1,
					  F2, F3).


skip_length_delimited_rpbsearchqueryresp(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_rpbsearchqueryresp(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3);
skip_length_delimited_rpbsearchqueryresp(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbsearchqueryresp(Rest2, 0, 0, F1,
					  F2, F3).


skip_32_rpbsearchqueryresp(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, F2, F3) ->
    dfp_read_field_def_rpbsearchqueryresp(Rest, Z1, Z2, F1,
					  F2, F3).


skip_64_rpbsearchqueryresp(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, F2, F3) ->
    dfp_read_field_def_rpbsearchqueryresp(Rest, Z1, Z2, F1,
					  F2, F3).


d_msg_rpbsearchqueryreq(Bin) ->
    dfp_read_field_def_rpbsearchqueryreq(Bin, 0, 0,
					 id(undefined), id(undefined),
					 id(undefined), id(undefined),
					 id(undefined), id(undefined),
					 id(undefined), id(undefined), id([]),
					 id(undefined)).

dfp_read_field_def_rpbsearchqueryreq(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10) ->
    d_field_rpbsearchqueryreq_q(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10);
dfp_read_field_def_rpbsearchqueryreq(<<18,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10) ->
    d_field_rpbsearchqueryreq_index(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10);
dfp_read_field_def_rpbsearchqueryreq(<<24,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10) ->
    d_field_rpbsearchqueryreq_rows(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10);
dfp_read_field_def_rpbsearchqueryreq(<<32,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10) ->
    d_field_rpbsearchqueryreq_start(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10);
dfp_read_field_def_rpbsearchqueryreq(<<42,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10) ->
    d_field_rpbsearchqueryreq_sort(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10);
dfp_read_field_def_rpbsearchqueryreq(<<50,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10) ->
    d_field_rpbsearchqueryreq_filter(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10);
dfp_read_field_def_rpbsearchqueryreq(<<58,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10) ->
    d_field_rpbsearchqueryreq_df(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10);
dfp_read_field_def_rpbsearchqueryreq(<<66,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10) ->
    d_field_rpbsearchqueryreq_op(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10);
dfp_read_field_def_rpbsearchqueryreq(<<74,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10) ->
    d_field_rpbsearchqueryreq_fl(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10);
dfp_read_field_def_rpbsearchqueryreq(<<82,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10) ->
    d_field_rpbsearchqueryreq_presort(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10);
dfp_read_field_def_rpbsearchqueryreq(<<>>, 0, 0, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10) ->
    #rpbsearchqueryreq{q = F1, index = F2, rows = F3,
		       start = F4, sort = F5, filter = F6, df = F7, op = F8,
		       fl = lists_reverse(F9), presort = F10};
dfp_read_field_def_rpbsearchqueryreq(Other, Z1, Z2, F1,
				     F2, F3, F4, F5, F6, F7, F8, F9, F10) ->
    dg_read_field_def_rpbsearchqueryreq(Other, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10).

dg_read_field_def_rpbsearchqueryreq(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10)
    when N < 32 - 7 ->
    dg_read_field_def_rpbsearchqueryreq(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10);
dg_read_field_def_rpbsearchqueryreq(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbsearchqueryreq_q(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, F8, F9, F10);
      18 ->
	  d_field_rpbsearchqueryreq_index(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10);
      24 ->
	  d_field_rpbsearchqueryreq_rows(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10);
      32 ->
	  d_field_rpbsearchqueryreq_start(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10);
      42 ->
	  d_field_rpbsearchqueryreq_sort(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10);
      50 ->
	  d_field_rpbsearchqueryreq_filter(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10);
      58 ->
	  d_field_rpbsearchqueryreq_df(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10);
      66 ->
	  d_field_rpbsearchqueryreq_op(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10);
      74 ->
	  d_field_rpbsearchqueryreq_fl(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10);
      82 ->
	  d_field_rpbsearchqueryreq_presort(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbsearchqueryreq(Rest, 0, 0, F1, F2, F3,
					      F4, F5, F6, F7, F8, F9, F10);
	    1 ->
		skip_64_rpbsearchqueryreq(Rest, 0, 0, F1, F2, F3, F4,
					  F5, F6, F7, F8, F9, F10);
	    2 ->
		skip_length_delimited_rpbsearchqueryreq(Rest, 0, 0, F1,
							F2, F3, F4, F5, F6, F7,
							F8, F9, F10);
	    5 ->
		skip_32_rpbsearchqueryreq(Rest, 0, 0, F1, F2, F3, F4,
					  F5, F6, F7, F8, F9, F10)
	  end
    end;
dg_read_field_def_rpbsearchqueryreq(<<>>, 0, 0, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10) ->
    #rpbsearchqueryreq{q = F1, index = F2, rows = F3,
		       start = F4, sort = F5, filter = F6, df = F7, op = F8,
		       fl = lists_reverse(F9), presort = F10}.

d_field_rpbsearchqueryreq_q(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10)
    when N < 57 ->
    d_field_rpbsearchqueryreq_q(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10);
d_field_rpbsearchqueryreq_q(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbsearchqueryreq(Rest2, 0, 0,
					 NewFValue, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10).


d_field_rpbsearchqueryreq_index(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10)
    when N < 57 ->
    d_field_rpbsearchqueryreq_index(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10);
d_field_rpbsearchqueryreq_index(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, _, F3, F4, F5, F6, F7, F8, F9,
				F10) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbsearchqueryreq(Rest2, 0, 0, F1,
					 NewFValue, F3, F4, F5, F6, F7, F8, F9,
					 F10).


d_field_rpbsearchqueryreq_rows(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10)
    when N < 57 ->
    d_field_rpbsearchqueryreq_rows(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10);
d_field_rpbsearchqueryreq_rows(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, _, F4, F5, F6, F7, F8, F9,
			       F10) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbsearchqueryreq(Rest, 0, 0, F1, F2,
					 NewFValue, F4, F5, F6, F7, F8, F9,
					 F10).


d_field_rpbsearchqueryreq_start(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10)
    when N < 57 ->
    d_field_rpbsearchqueryreq_start(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10);
d_field_rpbsearchqueryreq_start(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, _, F5, F6, F7, F8, F9,
				F10) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbsearchqueryreq(Rest, 0, 0, F1, F2,
					 F3, NewFValue, F5, F6, F7, F8, F9,
					 F10).


d_field_rpbsearchqueryreq_sort(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10)
    when N < 57 ->
    d_field_rpbsearchqueryreq_sort(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10);
d_field_rpbsearchqueryreq_sort(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, _, F6, F7, F8, F9,
			       F10) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbsearchqueryreq(Rest2, 0, 0, F1,
					 F2, F3, F4, NewFValue, F6, F7, F8, F9,
					 F10).


d_field_rpbsearchqueryreq_filter(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10)
    when N < 57 ->
    d_field_rpbsearchqueryreq_filter(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10);
d_field_rpbsearchqueryreq_filter(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, _, F7, F8, F9,
				 F10) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbsearchqueryreq(Rest2, 0, 0, F1,
					 F2, F3, F4, F5, NewFValue, F7, F8, F9,
					 F10).


d_field_rpbsearchqueryreq_df(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10)
    when N < 57 ->
    d_field_rpbsearchqueryreq_df(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10);
d_field_rpbsearchqueryreq_df(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, _, F8, F9, F10) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbsearchqueryreq(Rest2, 0, 0, F1,
					 F2, F3, F4, F5, F6, NewFValue, F8, F9,
					 F10).


d_field_rpbsearchqueryreq_op(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10)
    when N < 57 ->
    d_field_rpbsearchqueryreq_op(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10);
d_field_rpbsearchqueryreq_op(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, _, F9, F10) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbsearchqueryreq(Rest2, 0, 0, F1,
					 F2, F3, F4, F5, F6, F7, NewFValue, F9,
					 F10).


d_field_rpbsearchqueryreq_fl(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10)
    when N < 57 ->
    d_field_rpbsearchqueryreq_fl(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10);
d_field_rpbsearchqueryreq_fl(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbsearchqueryreq(Rest2, 0, 0, F1,
					 F2, F3, F4, F5, F6, F7, F8,
					 cons(NewFValue, F9), F10).


d_field_rpbsearchqueryreq_presort(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10)
    when N < 57 ->
    d_field_rpbsearchqueryreq_presort(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10);
d_field_rpbsearchqueryreq_presort(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbsearchqueryreq(Rest2, 0, 0, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9,
					 NewFValue).


skip_varint_rpbsearchqueryreq(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			      F10) ->
    skip_varint_rpbsearchqueryreq(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10);
skip_varint_rpbsearchqueryreq(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			      F10) ->
    dfp_read_field_def_rpbsearchqueryreq(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10).


skip_length_delimited_rpbsearchqueryreq(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10)
    when N < 57 ->
    skip_length_delimited_rpbsearchqueryreq(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, F10);
skip_length_delimited_rpbsearchqueryreq(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbsearchqueryreq(Rest2, 0, 0, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10).


skip_32_rpbsearchqueryreq(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5, F6, F7, F8, F9, F10) ->
    dfp_read_field_def_rpbsearchqueryreq(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10).


skip_64_rpbsearchqueryreq(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5, F6, F7, F8, F9, F10) ->
    dfp_read_field_def_rpbsearchqueryreq(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10).


d_msg_rpbsetbucketreq(Bin) ->
    dfp_read_field_def_rpbsetbucketreq(Bin, 0, 0,
				       id(undefined), id(undefined),
				       id(undefined)).

dfp_read_field_def_rpbsetbucketreq(<<10, Rest/binary>>,
				   Z1, Z2, F1, F2, F3) ->
    d_field_rpbsetbucketreq_bucket(Rest, Z1, Z2, F1, F2,
				   F3);
dfp_read_field_def_rpbsetbucketreq(<<18, Rest/binary>>,
				   Z1, Z2, F1, F2, F3) ->
    d_field_rpbsetbucketreq_props(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_rpbsetbucketreq(<<26, Rest/binary>>,
				   Z1, Z2, F1, F2, F3) ->
    d_field_rpbsetbucketreq_type(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_rpbsetbucketreq(<<>>, 0, 0, F1, F2,
				   F3) ->
    #rpbsetbucketreq{bucket = F1, props = F2, type = F3};
dfp_read_field_def_rpbsetbucketreq(Other, Z1, Z2, F1,
				   F2, F3) ->
    dg_read_field_def_rpbsetbucketreq(Other, Z1, Z2, F1, F2,
				      F3).

dg_read_field_def_rpbsetbucketreq(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_rpbsetbucketreq(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3);
dg_read_field_def_rpbsetbucketreq(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbsetbucketreq_bucket(Rest, 0, 0, F1, F2, F3);
      18 ->
	  d_field_rpbsetbucketreq_props(Rest, 0, 0, F1, F2, F3);
      26 ->
	  d_field_rpbsetbucketreq_type(Rest, 0, 0, F1, F2, F3);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbsetbucketreq(Rest, 0, 0, F1, F2, F3);
	    1 -> skip_64_rpbsetbucketreq(Rest, 0, 0, F1, F2, F3);
	    2 ->
		skip_length_delimited_rpbsetbucketreq(Rest, 0, 0, F1,
						      F2, F3);
	    5 -> skip_32_rpbsetbucketreq(Rest, 0, 0, F1, F2, F3)
	  end
    end;
dg_read_field_def_rpbsetbucketreq(<<>>, 0, 0, F1, F2,
				  F3) ->
    #rpbsetbucketreq{bucket = F1, props = F2, type = F3}.

d_field_rpbsetbucketreq_bucket(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_rpbsetbucketreq_bucket(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3);
d_field_rpbsetbucketreq_bucket(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbsetbucketreq(Rest2, 0, 0,
				       NewFValue, F2, F3).


d_field_rpbsetbucketreq_props(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_rpbsetbucketreq_props(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3);
d_field_rpbsetbucketreq_props(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_rpbbucketprops(Bs),
    dfp_read_field_def_rpbsetbucketreq(Rest2, 0, 0, F1,
				       if F2 == undefined -> NewFValue;
					  true ->
					      merge_msg_rpbbucketprops(F2,
								       NewFValue)
				       end,
				       F3).


d_field_rpbsetbucketreq_type(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_rpbsetbucketreq_type(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3);
d_field_rpbsetbucketreq_type(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbsetbucketreq(Rest2, 0, 0, F1, F2,
				       NewFValue).


skip_varint_rpbsetbucketreq(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3) ->
    skip_varint_rpbsetbucketreq(Rest, Z1, Z2, F1, F2, F3);
skip_varint_rpbsetbucketreq(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_rpbsetbucketreq(Rest, Z1, Z2, F1, F2,
				       F3).


skip_length_delimited_rpbsetbucketreq(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_rpbsetbucketreq(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3);
skip_length_delimited_rpbsetbucketreq(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbsetbucketreq(Rest2, 0, 0, F1, F2,
				       F3).


skip_32_rpbsetbucketreq(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, F3) ->
    dfp_read_field_def_rpbsetbucketreq(Rest, Z1, Z2, F1, F2,
				       F3).


skip_64_rpbsetbucketreq(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, F3) ->
    dfp_read_field_def_rpbsetbucketreq(Rest, Z1, Z2, F1, F2,
				       F3).


d_msg_rpbgetbucketreq(Bin) ->
    dfp_read_field_def_rpbgetbucketreq(Bin, 0, 0,
				       id(undefined), id(undefined)).

dfp_read_field_def_rpbgetbucketreq(<<10, Rest/binary>>,
				   Z1, Z2, F1, F2) ->
    d_field_rpbgetbucketreq_bucket(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_rpbgetbucketreq(<<18, Rest/binary>>,
				   Z1, Z2, F1, F2) ->
    d_field_rpbgetbucketreq_type(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_rpbgetbucketreq(<<>>, 0, 0, F1,
				   F2) ->
    #rpbgetbucketreq{bucket = F1, type = F2};
dfp_read_field_def_rpbgetbucketreq(Other, Z1, Z2, F1,
				   F2) ->
    dg_read_field_def_rpbgetbucketreq(Other, Z1, Z2, F1,
				      F2).

dg_read_field_def_rpbgetbucketreq(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_rpbgetbucketreq(Rest, N + 7,
				      X bsl N + Acc, F1, F2);
dg_read_field_def_rpbgetbucketreq(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbgetbucketreq_bucket(Rest, 0, 0, F1, F2);
      18 -> d_field_rpbgetbucketreq_type(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_rpbgetbucketreq(Rest, 0, 0, F1, F2);
	    1 -> skip_64_rpbgetbucketreq(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_rpbgetbucketreq(Rest, 0, 0, F1,
						      F2);
	    5 -> skip_32_rpbgetbucketreq(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_rpbgetbucketreq(<<>>, 0, 0, F1, F2) ->
    #rpbgetbucketreq{bucket = F1, type = F2}.

d_field_rpbgetbucketreq_bucket(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2)
    when N < 57 ->
    d_field_rpbgetbucketreq_bucket(Rest, N + 7,
				   X bsl N + Acc, F1, F2);
d_field_rpbgetbucketreq_bucket(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbgetbucketreq(Rest2, 0, 0,
				       NewFValue, F2).


d_field_rpbgetbucketreq_type(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2)
    when N < 57 ->
    d_field_rpbgetbucketreq_type(Rest, N + 7, X bsl N + Acc,
				 F1, F2);
d_field_rpbgetbucketreq_type(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbgetbucketreq(Rest2, 0, 0, F1,
				       NewFValue).


skip_varint_rpbgetbucketreq(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2) ->
    skip_varint_rpbgetbucketreq(Rest, Z1, Z2, F1, F2);
skip_varint_rpbgetbucketreq(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2) ->
    dfp_read_field_def_rpbgetbucketreq(Rest, Z1, Z2, F1,
				       F2).


skip_length_delimited_rpbgetbucketreq(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_rpbgetbucketreq(Rest, N + 7,
					  X bsl N + Acc, F1, F2);
skip_length_delimited_rpbgetbucketreq(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbgetbucketreq(Rest2, 0, 0, F1, F2).


skip_32_rpbgetbucketreq(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2) ->
    dfp_read_field_def_rpbgetbucketreq(Rest, Z1, Z2, F1,
				       F2).


skip_64_rpbgetbucketreq(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2) ->
    dfp_read_field_def_rpbgetbucketreq(Rest, Z1, Z2, F1,
				       F2).


d_msg_rpbauthreq(Bin) ->
    dfp_read_field_def_rpbauthreq(Bin, 0, 0, id(undefined),
				  id(undefined)).

dfp_read_field_def_rpbauthreq(<<10, Rest/binary>>, Z1,
			      Z2, F1, F2) ->
    d_field_rpbauthreq_user(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_rpbauthreq(<<18, Rest/binary>>, Z1,
			      Z2, F1, F2) ->
    d_field_rpbauthreq_password(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_rpbauthreq(<<>>, 0, 0, F1, F2) ->
    #rpbauthreq{user = F1, password = F2};
dfp_read_field_def_rpbauthreq(Other, Z1, Z2, F1, F2) ->
    dg_read_field_def_rpbauthreq(Other, Z1, Z2, F1, F2).

dg_read_field_def_rpbauthreq(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_rpbauthreq(Rest, N + 7, X bsl N + Acc,
				 F1, F2);
dg_read_field_def_rpbauthreq(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_rpbauthreq_user(Rest, 0, 0, F1, F2);
      18 -> d_field_rpbauthreq_password(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_rpbauthreq(Rest, 0, 0, F1, F2);
	    1 -> skip_64_rpbauthreq(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_rpbauthreq(Rest, 0, 0, F1, F2);
	    5 -> skip_32_rpbauthreq(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_rpbauthreq(<<>>, 0, 0, F1, F2) ->
    #rpbauthreq{user = F1, password = F2}.

d_field_rpbauthreq_user(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2)
    when N < 57 ->
    d_field_rpbauthreq_user(Rest, N + 7, X bsl N + Acc, F1,
			    F2);
d_field_rpbauthreq_user(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbauthreq(Rest2, 0, 0, NewFValue,
				  F2).


d_field_rpbauthreq_password(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2)
    when N < 57 ->
    d_field_rpbauthreq_password(Rest, N + 7, X bsl N + Acc,
				F1, F2);
d_field_rpbauthreq_password(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbauthreq(Rest2, 0, 0, F1,
				  NewFValue).


skip_varint_rpbauthreq(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2) ->
    skip_varint_rpbauthreq(Rest, Z1, Z2, F1, F2);
skip_varint_rpbauthreq(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2) ->
    dfp_read_field_def_rpbauthreq(Rest, Z1, Z2, F1, F2).


skip_length_delimited_rpbauthreq(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_rpbauthreq(Rest, N + 7,
				     X bsl N + Acc, F1, F2);
skip_length_delimited_rpbauthreq(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbauthreq(Rest2, 0, 0, F1, F2).


skip_32_rpbauthreq(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   F2) ->
    dfp_read_field_def_rpbauthreq(Rest, Z1, Z2, F1, F2).


skip_64_rpbauthreq(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   F2) ->
    dfp_read_field_def_rpbauthreq(Rest, Z1, Z2, F1, F2).


d_msg_rpbgetbucketresp(Bin) ->
    dfp_read_field_def_rpbgetbucketresp(Bin, 0, 0,
					id(undefined)).

dfp_read_field_def_rpbgetbucketresp(<<10, Rest/binary>>,
				    Z1, Z2, F1) ->
    d_field_rpbgetbucketresp_props(Rest, Z1, Z2, F1);
dfp_read_field_def_rpbgetbucketresp(<<>>, 0, 0, F1) ->
    #rpbgetbucketresp{props = F1};
dfp_read_field_def_rpbgetbucketresp(Other, Z1, Z2,
				    F1) ->
    dg_read_field_def_rpbgetbucketresp(Other, Z1, Z2, F1).

dg_read_field_def_rpbgetbucketresp(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_rpbgetbucketresp(Rest, N + 7,
				       X bsl N + Acc, F1);
dg_read_field_def_rpbgetbucketresp(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_rpbgetbucketresp_props(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_rpbgetbucketresp(Rest, 0, 0, F1);
	    1 -> skip_64_rpbgetbucketresp(Rest, 0, 0, F1);
	    2 ->
		skip_length_delimited_rpbgetbucketresp(Rest, 0, 0, F1);
	    5 -> skip_32_rpbgetbucketresp(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_rpbgetbucketresp(<<>>, 0, 0, F1) ->
    #rpbgetbucketresp{props = F1}.

d_field_rpbgetbucketresp_props(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1)
    when N < 57 ->
    d_field_rpbgetbucketresp_props(Rest, N + 7,
				   X bsl N + Acc, F1);
d_field_rpbgetbucketresp_props(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_rpbbucketprops(Bs),
    dfp_read_field_def_rpbgetbucketresp(Rest2, 0, 0,
					if F1 == undefined -> NewFValue;
					   true ->
					       merge_msg_rpbbucketprops(F1,
									NewFValue)
					end).


skip_varint_rpbgetbucketresp(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1) ->
    skip_varint_rpbgetbucketresp(Rest, Z1, Z2, F1);
skip_varint_rpbgetbucketresp(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1) ->
    dfp_read_field_def_rpbgetbucketresp(Rest, Z1, Z2, F1).


skip_length_delimited_rpbgetbucketresp(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_rpbgetbucketresp(Rest, N + 7,
					   X bsl N + Acc, F1);
skip_length_delimited_rpbgetbucketresp(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbgetbucketresp(Rest2, 0, 0, F1).


skip_32_rpbgetbucketresp(<<_:32, Rest/binary>>, Z1, Z2,
			 F1) ->
    dfp_read_field_def_rpbgetbucketresp(Rest, Z1, Z2, F1).


skip_64_rpbgetbucketresp(<<_:64, Rest/binary>>, Z1, Z2,
			 F1) ->
    dfp_read_field_def_rpbgetbucketresp(Rest, Z1, Z2, F1).


d_msg_rpberrorresp(Bin) ->
    dfp_read_field_def_rpberrorresp(Bin, 0, 0,
				    id(undefined), id(undefined)).

dfp_read_field_def_rpberrorresp(<<10, Rest/binary>>, Z1,
				Z2, F1, F2) ->
    d_field_rpberrorresp_errmsg(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_rpberrorresp(<<16, Rest/binary>>, Z1,
				Z2, F1, F2) ->
    d_field_rpberrorresp_errcode(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_rpberrorresp(<<>>, 0, 0, F1, F2) ->
    #rpberrorresp{errmsg = F1, errcode = F2};
dfp_read_field_def_rpberrorresp(Other, Z1, Z2, F1,
				F2) ->
    dg_read_field_def_rpberrorresp(Other, Z1, Z2, F1, F2).

dg_read_field_def_rpberrorresp(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_rpberrorresp(Rest, N + 7,
				   X bsl N + Acc, F1, F2);
dg_read_field_def_rpberrorresp(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_rpberrorresp_errmsg(Rest, 0, 0, F1, F2);
      16 -> d_field_rpberrorresp_errcode(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_rpberrorresp(Rest, 0, 0, F1, F2);
	    1 -> skip_64_rpberrorresp(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_rpberrorresp(Rest, 0, 0, F1, F2);
	    5 -> skip_32_rpberrorresp(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_rpberrorresp(<<>>, 0, 0, F1, F2) ->
    #rpberrorresp{errmsg = F1, errcode = F2}.

d_field_rpberrorresp_errmsg(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2)
    when N < 57 ->
    d_field_rpberrorresp_errmsg(Rest, N + 7, X bsl N + Acc,
				F1, F2);
d_field_rpberrorresp_errmsg(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpberrorresp(Rest2, 0, 0, NewFValue,
				    F2).


d_field_rpberrorresp_errcode(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2)
    when N < 57 ->
    d_field_rpberrorresp_errcode(Rest, N + 7, X bsl N + Acc,
				 F1, F2);
d_field_rpberrorresp_errcode(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, _) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpberrorresp(Rest, 0, 0, F1,
				    NewFValue).


skip_varint_rpberrorresp(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2) ->
    skip_varint_rpberrorresp(Rest, Z1, Z2, F1, F2);
skip_varint_rpberrorresp(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2) ->
    dfp_read_field_def_rpberrorresp(Rest, Z1, Z2, F1, F2).


skip_length_delimited_rpberrorresp(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_rpberrorresp(Rest, N + 7,
				       X bsl N + Acc, F1, F2);
skip_length_delimited_rpberrorresp(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpberrorresp(Rest2, 0, 0, F1, F2).


skip_32_rpberrorresp(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2) ->
    dfp_read_field_def_rpberrorresp(Rest, Z1, Z2, F1, F2).


skip_64_rpberrorresp(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2) ->
    dfp_read_field_def_rpberrorresp(Rest, Z1, Z2, F1, F2).




'd_enum_RpbBucketProps.RpbReplMode'(0) -> 'FALSE';
'd_enum_RpbBucketProps.RpbReplMode'(1) -> 'REALTIME';
'd_enum_RpbBucketProps.RpbReplMode'(2) -> 'FULLSYNC';
'd_enum_RpbBucketProps.RpbReplMode'(3) -> 'TRUE'.



merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    case Prev of
      #rpbmodfun{} -> merge_msg_rpbmodfun(Prev, New);
      #rpbcommithook{} -> merge_msg_rpbcommithook(Prev, New);
      #rpbbucketprops{} ->
	  merge_msg_rpbbucketprops(Prev, New);
      #rpbpair{} -> merge_msg_rpbpair(Prev, New);
      #rpbresetbucketreq{} ->
	  merge_msg_rpbresetbucketreq(Prev, New);
      #rpbsearchdoc{} -> merge_msg_rpbsearchdoc(Prev, New);
      #rpbsetbuckettypereq{} ->
	  merge_msg_rpbsetbuckettypereq(Prev, New);
      #rpbgetbuckettypereq{} ->
	  merge_msg_rpbgetbuckettypereq(Prev, New);
      #rpbgetserverinforesp{} ->
	  merge_msg_rpbgetserverinforesp(Prev, New);
      #rpbsearchqueryresp{} ->
	  merge_msg_rpbsearchqueryresp(Prev, New);
      #rpbsearchqueryreq{} ->
	  merge_msg_rpbsearchqueryreq(Prev, New);
      #rpbsetbucketreq{} ->
	  merge_msg_rpbsetbucketreq(Prev, New);
      #rpbgetbucketreq{} ->
	  merge_msg_rpbgetbucketreq(Prev, New);
      #rpbauthreq{} -> merge_msg_rpbauthreq(Prev, New);
      #rpbgetbucketresp{} ->
	  merge_msg_rpbgetbucketresp(Prev, New);
      #rpberrorresp{} -> merge_msg_rpberrorresp(Prev, New)
    end.

merge_msg_rpbmodfun(Prev, undefined) -> Prev;
merge_msg_rpbmodfun(undefined, New) -> New;
merge_msg_rpbmodfun(#rpbmodfun{module = PFmodule,
			       function = PFfunction},
		    #rpbmodfun{module = NFmodule, function = NFfunction}) ->
    #rpbmodfun{module =
		   if NFmodule =:= undefined -> PFmodule;
		      true -> NFmodule
		   end,
	       function =
		   if NFfunction =:= undefined -> PFfunction;
		      true -> NFfunction
		   end}.

merge_msg_rpbcommithook(#rpbcommithook{modfun =
					   PFmodfun,
				       name = PFname},
			#rpbcommithook{modfun = NFmodfun, name = NFname}) ->
    #rpbcommithook{modfun =
		       merge_msg_rpbmodfun(PFmodfun, NFmodfun),
		   name =
		       if NFname =:= undefined -> PFname;
			  true -> NFname
		       end}.

merge_msg_rpbbucketprops(#rpbbucketprops{n_val =
					     PFn_val,
					 allow_mult = PFallow_mult,
					 last_write_wins = PFlast_write_wins,
					 precommit = PFprecommit,
					 has_precommit = PFhas_precommit,
					 postcommit = PFpostcommit,
					 has_postcommit = PFhas_postcommit,
					 chash_keyfun = PFchash_keyfun,
					 linkfun = PFlinkfun,
					 old_vclock = PFold_vclock,
					 young_vclock = PFyoung_vclock,
					 big_vclock = PFbig_vclock,
					 small_vclock = PFsmall_vclock,
					 pr = PFpr, r = PFr, w = PFw, pw = PFpw,
					 dw = PFdw, rw = PFrw,
					 basic_quorum = PFbasic_quorum,
					 notfound_ok = PFnotfound_ok,
					 backend = PFbackend, search = PFsearch,
					 repl = PFrepl,
					 search_index = PFsearch_index,
					 datatype = PFdatatype,
					 consistent = PFconsistent,
					 write_once = PFwrite_once},
			 #rpbbucketprops{n_val = NFn_val,
					 allow_mult = NFallow_mult,
					 last_write_wins = NFlast_write_wins,
					 precommit = NFprecommit,
					 has_precommit = NFhas_precommit,
					 postcommit = NFpostcommit,
					 has_postcommit = NFhas_postcommit,
					 chash_keyfun = NFchash_keyfun,
					 linkfun = NFlinkfun,
					 old_vclock = NFold_vclock,
					 young_vclock = NFyoung_vclock,
					 big_vclock = NFbig_vclock,
					 small_vclock = NFsmall_vclock,
					 pr = NFpr, r = NFr, w = NFw, pw = NFpw,
					 dw = NFdw, rw = NFrw,
					 basic_quorum = NFbasic_quorum,
					 notfound_ok = NFnotfound_ok,
					 backend = NFbackend, search = NFsearch,
					 repl = NFrepl,
					 search_index = NFsearch_index,
					 datatype = NFdatatype,
					 consistent = NFconsistent,
					 write_once = NFwrite_once}) ->
    #rpbbucketprops{n_val =
			if NFn_val =:= undefined -> PFn_val;
			   true -> NFn_val
			end,
		    allow_mult =
			if NFallow_mult =:= undefined -> PFallow_mult;
			   true -> NFallow_mult
			end,
		    last_write_wins =
			if NFlast_write_wins =:= undefined -> PFlast_write_wins;
			   true -> NFlast_write_wins
			end,
		    precommit = 'erlang_++'(PFprecommit, NFprecommit),
		    has_precommit =
			if NFhas_precommit =:= undefined -> PFhas_precommit;
			   true -> NFhas_precommit
			end,
		    postcommit = 'erlang_++'(PFpostcommit, NFpostcommit),
		    has_postcommit =
			if NFhas_postcommit =:= undefined -> PFhas_postcommit;
			   true -> NFhas_postcommit
			end,
		    chash_keyfun =
			merge_msg_rpbmodfun(PFchash_keyfun, NFchash_keyfun),
		    linkfun = merge_msg_rpbmodfun(PFlinkfun, NFlinkfun),
		    old_vclock =
			if NFold_vclock =:= undefined -> PFold_vclock;
			   true -> NFold_vclock
			end,
		    young_vclock =
			if NFyoung_vclock =:= undefined -> PFyoung_vclock;
			   true -> NFyoung_vclock
			end,
		    big_vclock =
			if NFbig_vclock =:= undefined -> PFbig_vclock;
			   true -> NFbig_vclock
			end,
		    small_vclock =
			if NFsmall_vclock =:= undefined -> PFsmall_vclock;
			   true -> NFsmall_vclock
			end,
		    pr =
			if NFpr =:= undefined -> PFpr;
			   true -> NFpr
			end,
		    r =
			if NFr =:= undefined -> PFr;
			   true -> NFr
			end,
		    w =
			if NFw =:= undefined -> PFw;
			   true -> NFw
			end,
		    pw =
			if NFpw =:= undefined -> PFpw;
			   true -> NFpw
			end,
		    dw =
			if NFdw =:= undefined -> PFdw;
			   true -> NFdw
			end,
		    rw =
			if NFrw =:= undefined -> PFrw;
			   true -> NFrw
			end,
		    basic_quorum =
			if NFbasic_quorum =:= undefined -> PFbasic_quorum;
			   true -> NFbasic_quorum
			end,
		    notfound_ok =
			if NFnotfound_ok =:= undefined -> PFnotfound_ok;
			   true -> NFnotfound_ok
			end,
		    backend =
			if NFbackend =:= undefined -> PFbackend;
			   true -> NFbackend
			end,
		    search =
			if NFsearch =:= undefined -> PFsearch;
			   true -> NFsearch
			end,
		    repl =
			if NFrepl =:= undefined -> PFrepl;
			   true -> NFrepl
			end,
		    search_index =
			if NFsearch_index =:= undefined -> PFsearch_index;
			   true -> NFsearch_index
			end,
		    datatype =
			if NFdatatype =:= undefined -> PFdatatype;
			   true -> NFdatatype
			end,
		    consistent =
			if NFconsistent =:= undefined -> PFconsistent;
			   true -> NFconsistent
			end,
		    write_once =
			if NFwrite_once =:= undefined -> PFwrite_once;
			   true -> NFwrite_once
			end}.

merge_msg_rpbpair(#rpbpair{key = PFkey,
			   value = PFvalue},
		  #rpbpair{key = NFkey, value = NFvalue}) ->
    #rpbpair{key =
		 if NFkey =:= undefined -> PFkey;
		    true -> NFkey
		 end,
	     value =
		 if NFvalue =:= undefined -> PFvalue;
		    true -> NFvalue
		 end}.

merge_msg_rpbresetbucketreq(#rpbresetbucketreq{bucket =
						   PFbucket,
					       type = PFtype},
			    #rpbresetbucketreq{bucket = NFbucket,
					       type = NFtype}) ->
    #rpbresetbucketreq{bucket =
			   if NFbucket =:= undefined -> PFbucket;
			      true -> NFbucket
			   end,
		       type =
			   if NFtype =:= undefined -> PFtype;
			      true -> NFtype
			   end}.

merge_msg_rpbsearchdoc(#rpbsearchdoc{fields = PFfields},
		       #rpbsearchdoc{fields = NFfields}) ->
    #rpbsearchdoc{fields = 'erlang_++'(PFfields, NFfields)}.

merge_msg_rpbsetbuckettypereq(#rpbsetbuckettypereq{type
						       = PFtype,
						   props = PFprops},
			      #rpbsetbuckettypereq{type = NFtype,
						   props = NFprops}) ->
    #rpbsetbuckettypereq{type =
			     if NFtype =:= undefined -> PFtype;
				true -> NFtype
			     end,
			 props = merge_msg_rpbbucketprops(PFprops, NFprops)}.

merge_msg_rpbgetbuckettypereq(#rpbgetbuckettypereq{type
						       = PFtype},
			      #rpbgetbuckettypereq{type = NFtype}) ->
    #rpbgetbuckettypereq{type =
			     if NFtype =:= undefined -> PFtype;
				true -> NFtype
			     end}.

merge_msg_rpbgetserverinforesp(#rpbgetserverinforesp{node
							 = PFnode,
						     server_version =
							 PFserver_version},
			       #rpbgetserverinforesp{node = NFnode,
						     server_version =
							 NFserver_version}) ->
    #rpbgetserverinforesp{node =
			      if NFnode =:= undefined -> PFnode;
				 true -> NFnode
			      end,
			  server_version =
			      if NFserver_version =:= undefined ->
				     PFserver_version;
				 true -> NFserver_version
			      end}.

merge_msg_rpbsearchqueryresp(#rpbsearchqueryresp{docs =
						     PFdocs,
						 max_score = PFmax_score,
						 num_found = PFnum_found},
			     #rpbsearchqueryresp{docs = NFdocs,
						 max_score = NFmax_score,
						 num_found = NFnum_found}) ->
    #rpbsearchqueryresp{docs = 'erlang_++'(PFdocs, NFdocs),
			max_score =
			    if NFmax_score =:= undefined -> PFmax_score;
			       true -> NFmax_score
			    end,
			num_found =
			    if NFnum_found =:= undefined -> PFnum_found;
			       true -> NFnum_found
			    end}.

merge_msg_rpbsearchqueryreq(#rpbsearchqueryreq{q = PFq,
					       index = PFindex, rows = PFrows,
					       start = PFstart, sort = PFsort,
					       filter = PFfilter, df = PFdf,
					       op = PFop, fl = PFfl,
					       presort = PFpresort},
			    #rpbsearchqueryreq{q = NFq, index = NFindex,
					       rows = NFrows, start = NFstart,
					       sort = NFsort, filter = NFfilter,
					       df = NFdf, op = NFop, fl = NFfl,
					       presort = NFpresort}) ->
    #rpbsearchqueryreq{q =
			   if NFq =:= undefined -> PFq;
			      true -> NFq
			   end,
		       index =
			   if NFindex =:= undefined -> PFindex;
			      true -> NFindex
			   end,
		       rows =
			   if NFrows =:= undefined -> PFrows;
			      true -> NFrows
			   end,
		       start =
			   if NFstart =:= undefined -> PFstart;
			      true -> NFstart
			   end,
		       sort =
			   if NFsort =:= undefined -> PFsort;
			      true -> NFsort
			   end,
		       filter =
			   if NFfilter =:= undefined -> PFfilter;
			      true -> NFfilter
			   end,
		       df =
			   if NFdf =:= undefined -> PFdf;
			      true -> NFdf
			   end,
		       op =
			   if NFop =:= undefined -> PFop;
			      true -> NFop
			   end,
		       fl = 'erlang_++'(PFfl, NFfl),
		       presort =
			   if NFpresort =:= undefined -> PFpresort;
			      true -> NFpresort
			   end}.

merge_msg_rpbsetbucketreq(#rpbsetbucketreq{bucket =
					       PFbucket,
					   props = PFprops, type = PFtype},
			  #rpbsetbucketreq{bucket = NFbucket, props = NFprops,
					   type = NFtype}) ->
    #rpbsetbucketreq{bucket =
			 if NFbucket =:= undefined -> PFbucket;
			    true -> NFbucket
			 end,
		     props = merge_msg_rpbbucketprops(PFprops, NFprops),
		     type =
			 if NFtype =:= undefined -> PFtype;
			    true -> NFtype
			 end}.

merge_msg_rpbgetbucketreq(#rpbgetbucketreq{bucket =
					       PFbucket,
					   type = PFtype},
			  #rpbgetbucketreq{bucket = NFbucket, type = NFtype}) ->
    #rpbgetbucketreq{bucket =
			 if NFbucket =:= undefined -> PFbucket;
			    true -> NFbucket
			 end,
		     type =
			 if NFtype =:= undefined -> PFtype;
			    true -> NFtype
			 end}.

merge_msg_rpbauthreq(#rpbauthreq{user = PFuser,
				 password = PFpassword},
		     #rpbauthreq{user = NFuser, password = NFpassword}) ->
    #rpbauthreq{user =
		    if NFuser =:= undefined -> PFuser;
		       true -> NFuser
		    end,
		password =
		    if NFpassword =:= undefined -> PFpassword;
		       true -> NFpassword
		    end}.

merge_msg_rpbgetbucketresp(#rpbgetbucketresp{props =
						 PFprops},
			   #rpbgetbucketresp{props = NFprops}) ->
    #rpbgetbucketresp{props =
			  merge_msg_rpbbucketprops(PFprops, NFprops)}.

merge_msg_rpberrorresp(#rpberrorresp{errmsg = PFerrmsg,
				     errcode = PFerrcode},
		       #rpberrorresp{errmsg = NFerrmsg,
				     errcode = NFerrcode}) ->
    #rpberrorresp{errmsg =
		      if NFerrmsg =:= undefined -> PFerrmsg;
			 true -> NFerrmsg
		      end,
		  errcode =
		      if NFerrcode =:= undefined -> PFerrcode;
			 true -> NFerrcode
		      end}.



verify_msg(Msg) ->
    case Msg of
      #rpbmodfun{} -> v_msg_rpbmodfun(Msg, [rpbmodfun]);
      #rpbcommithook{} ->
	  v_msg_rpbcommithook(Msg, [rpbcommithook]);
      #rpbbucketprops{} ->
	  v_msg_rpbbucketprops(Msg, [rpbbucketprops]);
      #rpbpair{} -> v_msg_rpbpair(Msg, [rpbpair]);
      #rpbresetbucketreq{} ->
	  v_msg_rpbresetbucketreq(Msg, [rpbresetbucketreq]);
      #rpbsearchdoc{} ->
	  v_msg_rpbsearchdoc(Msg, [rpbsearchdoc]);
      #rpbsetbuckettypereq{} ->
	  v_msg_rpbsetbuckettypereq(Msg, [rpbsetbuckettypereq]);
      #rpbgetbuckettypereq{} ->
	  v_msg_rpbgetbuckettypereq(Msg, [rpbgetbuckettypereq]);
      #rpbgetserverinforesp{} ->
	  v_msg_rpbgetserverinforesp(Msg, [rpbgetserverinforesp]);
      #rpbsearchqueryresp{} ->
	  v_msg_rpbsearchqueryresp(Msg, [rpbsearchqueryresp]);
      #rpbsearchqueryreq{} ->
	  v_msg_rpbsearchqueryreq(Msg, [rpbsearchqueryreq]);
      #rpbsetbucketreq{} ->
	  v_msg_rpbsetbucketreq(Msg, [rpbsetbucketreq]);
      #rpbgetbucketreq{} ->
	  v_msg_rpbgetbucketreq(Msg, [rpbgetbucketreq]);
      #rpbauthreq{} -> v_msg_rpbauthreq(Msg, [rpbauthreq]);
      #rpbgetbucketresp{} ->
	  v_msg_rpbgetbucketresp(Msg, [rpbgetbucketresp]);
      #rpberrorresp{} ->
	  v_msg_rpberrorresp(Msg, [rpberrorresp]);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


v_msg_rpbmodfun(#rpbmodfun{module = F1, function = F2},
		Path) ->
    v_type_bytes(F1, [module | Path]),
    v_type_bytes(F2, [function | Path]),
    ok;
v_msg_rpbmodfun(X, Path) ->
    mk_type_error({expected_msg, rpbmodfun}, X, Path).

v_msg_rpbcommithook(#rpbcommithook{modfun = F1,
				   name = F2},
		    Path) ->
    if F1 == undefined -> ok;
       true -> v_msg_rpbmodfun(F1, [modfun | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [name | Path])
    end,
    ok;
v_msg_rpbcommithook(X, Path) ->
    mk_type_error({expected_msg, rpbcommithook}, X, Path).

v_msg_rpbbucketprops(#rpbbucketprops{n_val = F1,
				     allow_mult = F2, last_write_wins = F3,
				     precommit = F4, has_precommit = F5,
				     postcommit = F6, has_postcommit = F7,
				     chash_keyfun = F8, linkfun = F9,
				     old_vclock = F10, young_vclock = F11,
				     big_vclock = F12, small_vclock = F13,
				     pr = F14, r = F15, w = F16, pw = F17,
				     dw = F18, rw = F19, basic_quorum = F20,
				     notfound_ok = F21, backend = F22,
				     search = F23, repl = F24,
				     search_index = F25, datatype = F26,
				     consistent = F27, write_once = F28},
		     Path) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [n_val | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [allow_mult | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [last_write_wins | Path])
    end,
    if is_list(F4) ->
	   [v_msg_rpbcommithook(Elem, [precommit | Path])
	    || Elem <- F4];
       true ->
	   mk_type_error({invalid_list_of, {msg, rpbcommithook}},
			 F4, Path)
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [has_precommit | Path])
    end,
    if is_list(F6) ->
	   [v_msg_rpbcommithook(Elem, [postcommit | Path])
	    || Elem <- F6];
       true ->
	   mk_type_error({invalid_list_of, {msg, rpbcommithook}},
			 F6, Path)
    end,
    if F7 == undefined -> ok;
       true -> v_type_bool(F7, [has_postcommit | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_msg_rpbmodfun(F8, [chash_keyfun | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_msg_rpbmodfun(F9, [linkfun | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint32(F10, [old_vclock | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_uint32(F11, [young_vclock | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_uint32(F12, [big_vclock | Path])
    end,
    if F13 == undefined -> ok;
       true -> v_type_uint32(F13, [small_vclock | Path])
    end,
    if F14 == undefined -> ok;
       true -> v_type_uint32(F14, [pr | Path])
    end,
    if F15 == undefined -> ok;
       true -> v_type_uint32(F15, [r | Path])
    end,
    if F16 == undefined -> ok;
       true -> v_type_uint32(F16, [w | Path])
    end,
    if F17 == undefined -> ok;
       true -> v_type_uint32(F17, [pw | Path])
    end,
    if F18 == undefined -> ok;
       true -> v_type_uint32(F18, [dw | Path])
    end,
    if F19 == undefined -> ok;
       true -> v_type_uint32(F19, [rw | Path])
    end,
    if F20 == undefined -> ok;
       true -> v_type_bool(F20, [basic_quorum | Path])
    end,
    if F21 == undefined -> ok;
       true -> v_type_bool(F21, [notfound_ok | Path])
    end,
    if F22 == undefined -> ok;
       true -> v_type_bytes(F22, [backend | Path])
    end,
    if F23 == undefined -> ok;
       true -> v_type_bool(F23, [search | Path])
    end,
    if F24 == undefined -> ok;
       true ->
	   'v_enum_RpbBucketProps.RpbReplMode'(F24, [repl | Path])
    end,
    if F25 == undefined -> ok;
       true -> v_type_bytes(F25, [search_index | Path])
    end,
    if F26 == undefined -> ok;
       true -> v_type_bytes(F26, [datatype | Path])
    end,
    if F27 == undefined -> ok;
       true -> v_type_bool(F27, [consistent | Path])
    end,
    if F28 == undefined -> ok;
       true -> v_type_bool(F28, [write_once | Path])
    end,
    ok;
v_msg_rpbbucketprops(X, Path) ->
    mk_type_error({expected_msg, rpbbucketprops}, X, Path).

v_msg_rpbpair(#rpbpair{key = F1, value = F2}, Path) ->
    v_type_bytes(F1, [key | Path]),
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [value | Path])
    end,
    ok;
v_msg_rpbpair(X, Path) ->
    mk_type_error({expected_msg, rpbpair}, X, Path).

v_msg_rpbresetbucketreq(#rpbresetbucketreq{bucket = F1,
					   type = F2},
			Path) ->
    v_type_bytes(F1, [bucket | Path]),
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [type | Path])
    end,
    ok.

v_msg_rpbsearchdoc(#rpbsearchdoc{fields = F1}, Path) ->
    if is_list(F1) ->
	   [v_msg_rpbpair(Elem, [fields | Path]) || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of, {msg, rpbpair}}, F1,
			 Path)
    end,
    ok;
v_msg_rpbsearchdoc(X, Path) ->
    mk_type_error({expected_msg, rpbsearchdoc}, X, Path).

v_msg_rpbsetbuckettypereq(#rpbsetbuckettypereq{type =
						   F1,
					       props = F2},
			  Path) ->
    v_type_bytes(F1, [type | Path]),
    v_msg_rpbbucketprops(F2, [props | Path]),
    ok.

v_msg_rpbgetbuckettypereq(#rpbgetbuckettypereq{type =
						   F1},
			  Path) ->
    v_type_bytes(F1, [type | Path]), ok.

v_msg_rpbgetserverinforesp(#rpbgetserverinforesp{node =
						     F1,
						 server_version = F2},
			   Path) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [node | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [server_version | Path])
    end,
    ok.

v_msg_rpbsearchqueryresp(#rpbsearchqueryresp{docs = F1,
					     max_score = F2, num_found = F3},
			 Path) ->
    if is_list(F1) ->
	   [v_msg_rpbsearchdoc(Elem, [docs | Path]) || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of, {msg, rpbsearchdoc}},
			 F1, Path)
    end,
    if F2 == undefined -> ok;
       true -> v_type_float(F2, [max_score | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [num_found | Path])
    end,
    ok.

v_msg_rpbsearchqueryreq(#rpbsearchqueryreq{q = F1,
					   index = F2, rows = F3, start = F4,
					   sort = F5, filter = F6, df = F7,
					   op = F8, fl = F9, presort = F10},
			Path) ->
    v_type_bytes(F1, [q | Path]),
    v_type_bytes(F2, [index | Path]),
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [rows | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [start | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bytes(F5, [sort | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_bytes(F6, [filter | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_bytes(F7, [df | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_bytes(F8, [op | Path])
    end,
    if is_list(F9) ->
	   [v_type_bytes(Elem, [fl | Path]) || Elem <- F9];
       true ->
	   mk_type_error({invalid_list_of, bytes}, F9, Path)
    end,
    if F10 == undefined -> ok;
       true -> v_type_bytes(F10, [presort | Path])
    end,
    ok.

v_msg_rpbsetbucketreq(#rpbsetbucketreq{bucket = F1,
				       props = F2, type = F3},
		      Path) ->
    v_type_bytes(F1, [bucket | Path]),
    v_msg_rpbbucketprops(F2, [props | Path]),
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [type | Path])
    end,
    ok.

v_msg_rpbgetbucketreq(#rpbgetbucketreq{bucket = F1,
				       type = F2},
		      Path) ->
    v_type_bytes(F1, [bucket | Path]),
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [type | Path])
    end,
    ok.

v_msg_rpbauthreq(#rpbauthreq{user = F1, password = F2},
		 Path) ->
    v_type_bytes(F1, [user | Path]),
    v_type_bytes(F2, [password | Path]),
    ok.

v_msg_rpbgetbucketresp(#rpbgetbucketresp{props = F1},
		       Path) ->
    v_msg_rpbbucketprops(F1, [props | Path]), ok.

v_msg_rpberrorresp(#rpberrorresp{errmsg = F1,
				 errcode = F2},
		   Path) ->
    v_type_bytes(F1, [errmsg | Path]),
    v_type_uint32(F2, [errcode | Path]),
    ok.

'v_enum_RpbBucketProps.RpbReplMode'('FALSE', _Path) ->
    ok;
'v_enum_RpbBucketProps.RpbReplMode'('REALTIME',
				    _Path) ->
    ok;
'v_enum_RpbBucketProps.RpbReplMode'('FULLSYNC',
				    _Path) ->
    ok;
'v_enum_RpbBucketProps.RpbReplMode'('TRUE', _Path) ->
    ok;
'v_enum_RpbBucketProps.RpbReplMode'(X, Path) ->
    mk_type_error({invalid_enum,
		   'RpbBucketProps.RpbReplMode'},
		  X, Path).

v_type_uint32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(X, Path) ->
    mk_type_error(bad_boolean_value, X, Path).

v_type_float(N, _Path) when is_float(N) -> ok;
v_type_float(N, _Path) when is_integer(N) -> ok;
v_type_float(X, Path) ->
    mk_type_error(bad_float_value, X, Path).

v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({nowarn_unused_function,id/1}).
-compile({inline,id/1}).
id(X) -> X.

-compile({nowarn_unused_function,cons/2}).
-compile({inline,cons/2}).
cons(Elem, Acc) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/1}).
-compile({inline,lists_reverse/1}).
'lists_reverse'(L) -> lists:reverse(L).

-compile({nowarn_unused_function,'erlang_++'/2}).
-compile({inline,'erlang_++'/2}).
'erlang_++'(A, B) -> A ++ B.



get_msg_defs() ->
    [{{enum, 'RpbBucketProps.RpbReplMode'},
      [{'FALSE', 0}, {'REALTIME', 1}, {'FULLSYNC', 2},
       {'TRUE', 3}]},
     {{msg, rpbmodfun},
      [[{name, module}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, function}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, required}, {opts, []}]]},
     {{msg, rpbcommithook},
      [[{name, modfun}, {fnum, 1}, {rnum, 2},
	{type, {msg, rpbmodfun}}, {occurrence, optional},
	{opts, []}],
       [{name, name}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbbucketprops},
      [[{name, n_val}, {fnum, 1}, {rnum, 2}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, allow_mult}, {fnum, 2}, {rnum, 3}, {type, bool},
	{occurrence, optional}, {opts, []}],
       [{name, last_write_wins}, {fnum, 3}, {rnum, 4},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, precommit}, {fnum, 4}, {rnum, 5},
	{type, {msg, rpbcommithook}}, {occurrence, repeated},
	{opts, []}],
       [{name, has_precommit}, {fnum, 5}, {rnum, 6},
	{type, bool}, {occurrence, optional},
	{opts, [{default, false}]}],
       [{name, postcommit}, {fnum, 6}, {rnum, 7},
	{type, {msg, rpbcommithook}}, {occurrence, repeated},
	{opts, []}],
       [{name, has_postcommit}, {fnum, 7}, {rnum, 8},
	{type, bool}, {occurrence, optional},
	{opts, [{default, false}]}],
       [{name, chash_keyfun}, {fnum, 8}, {rnum, 9},
	{type, {msg, rpbmodfun}}, {occurrence, optional},
	{opts, []}],
       [{name, linkfun}, {fnum, 9}, {rnum, 10},
	{type, {msg, rpbmodfun}}, {occurrence, optional},
	{opts, []}],
       [{name, old_vclock}, {fnum, 10}, {rnum, 11},
	{type, uint32}, {occurrence, optional}, {opts, []}],
       [{name, young_vclock}, {fnum, 11}, {rnum, 12},
	{type, uint32}, {occurrence, optional}, {opts, []}],
       [{name, big_vclock}, {fnum, 12}, {rnum, 13},
	{type, uint32}, {occurrence, optional}, {opts, []}],
       [{name, small_vclock}, {fnum, 13}, {rnum, 14},
	{type, uint32}, {occurrence, optional}, {opts, []}],
       [{name, pr}, {fnum, 14}, {rnum, 15}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, r}, {fnum, 15}, {rnum, 16}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, w}, {fnum, 16}, {rnum, 17}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, pw}, {fnum, 17}, {rnum, 18}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, dw}, {fnum, 18}, {rnum, 19}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, rw}, {fnum, 19}, {rnum, 20}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, basic_quorum}, {fnum, 20}, {rnum, 21},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, notfound_ok}, {fnum, 21}, {rnum, 22},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, backend}, {fnum, 22}, {rnum, 23}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, search}, {fnum, 23}, {rnum, 24}, {type, bool},
	{occurrence, optional}, {opts, []}],
       [{name, repl}, {fnum, 24}, {rnum, 25},
	{type, {enum, 'RpbBucketProps.RpbReplMode'}},
	{occurrence, optional}, {opts, []}],
       [{name, search_index}, {fnum, 25}, {rnum, 26},
	{type, bytes}, {occurrence, optional}, {opts, []}],
       [{name, datatype}, {fnum, 26}, {rnum, 27},
	{type, bytes}, {occurrence, optional}, {opts, []}],
       [{name, consistent}, {fnum, 27}, {rnum, 28},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, write_once}, {fnum, 28}, {rnum, 29},
	{type, bool}, {occurrence, optional}, {opts, []}]]},
     {{msg, rpbpair},
      [[{name, key}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, value}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbresetbucketreq},
      [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, type}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbsearchdoc},
      [[{name, fields}, {fnum, 1}, {rnum, 2},
	{type, {msg, rpbpair}}, {occurrence, repeated},
	{opts, []}]]},
     {{msg, rpbsetbuckettypereq},
      [[{name, type}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, props}, {fnum, 2}, {rnum, 3},
	{type, {msg, rpbbucketprops}}, {occurrence, required},
	{opts, []}]]},
     {{msg, rpbgetbuckettypereq},
      [[{name, type}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}]]},
     {{msg, rpbgetserverinforesp},
      [[{name, node}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, server_version}, {fnum, 2}, {rnum, 3},
	{type, bytes}, {occurrence, optional}, {opts, []}]]},
     {{msg, rpbsearchqueryresp},
      [[{name, docs}, {fnum, 1}, {rnum, 2},
	{type, {msg, rpbsearchdoc}}, {occurrence, repeated},
	{opts, []}],
       [{name, max_score}, {fnum, 2}, {rnum, 3}, {type, float},
	{occurrence, optional}, {opts, []}],
       [{name, num_found}, {fnum, 3}, {rnum, 4},
	{type, uint32}, {occurrence, optional}, {opts, []}]]},
     {{msg, rpbsearchqueryreq},
      [[{name, q}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, index}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, rows}, {fnum, 3}, {rnum, 4}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, start}, {fnum, 4}, {rnum, 5}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, sort}, {fnum, 5}, {rnum, 6}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, filter}, {fnum, 6}, {rnum, 7}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, df}, {fnum, 7}, {rnum, 8}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, op}, {fnum, 8}, {rnum, 9}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, fl}, {fnum, 9}, {rnum, 10}, {type, bytes},
	{occurrence, repeated}, {opts, []}],
       [{name, presort}, {fnum, 10}, {rnum, 11}, {type, bytes},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbsetbucketreq},
      [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, props}, {fnum, 2}, {rnum, 3},
	{type, {msg, rpbbucketprops}}, {occurrence, required},
	{opts, []}],
       [{name, type}, {fnum, 3}, {rnum, 4}, {type, bytes},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbgetbucketreq},
      [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, type}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbauthreq},
      [[{name, user}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, password}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, required}, {opts, []}]]},
     {{msg, rpbgetbucketresp},
      [[{name, props}, {fnum, 1}, {rnum, 2},
	{type, {msg, rpbbucketprops}}, {occurrence, required},
	{opts, []}]]},
     {{msg, rpberrorresp},
      [[{name, errmsg}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, errcode}, {fnum, 2}, {rnum, 3}, {type, uint32},
	{occurrence, required}, {opts, []}]]}].


get_msg_names() ->
    [rpbmodfun, rpbcommithook, rpbbucketprops, rpbpair,
     rpbresetbucketreq, rpbsearchdoc, rpbsetbuckettypereq,
     rpbgetbuckettypereq, rpbgetserverinforesp,
     rpbsearchqueryresp, rpbsearchqueryreq, rpbsetbucketreq,
     rpbgetbucketreq, rpbauthreq, rpbgetbucketresp,
     rpberrorresp].


get_enum_names() -> ['RpbBucketProps.RpbReplMode'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(rpbmodfun) ->
    [[{name, module}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, function}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, required}, {opts, []}]];
find_msg_def(rpbcommithook) ->
    [[{name, modfun}, {fnum, 1}, {rnum, 2},
      {type, {msg, rpbmodfun}}, {occurrence, optional},
      {opts, []}],
     [{name, name}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbbucketprops) ->
    [[{name, n_val}, {fnum, 1}, {rnum, 2}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, allow_mult}, {fnum, 2}, {rnum, 3}, {type, bool},
      {occurrence, optional}, {opts, []}],
     [{name, last_write_wins}, {fnum, 3}, {rnum, 4},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, precommit}, {fnum, 4}, {rnum, 5},
      {type, {msg, rpbcommithook}}, {occurrence, repeated},
      {opts, []}],
     [{name, has_precommit}, {fnum, 5}, {rnum, 6},
      {type, bool}, {occurrence, optional},
      {opts, [{default, false}]}],
     [{name, postcommit}, {fnum, 6}, {rnum, 7},
      {type, {msg, rpbcommithook}}, {occurrence, repeated},
      {opts, []}],
     [{name, has_postcommit}, {fnum, 7}, {rnum, 8},
      {type, bool}, {occurrence, optional},
      {opts, [{default, false}]}],
     [{name, chash_keyfun}, {fnum, 8}, {rnum, 9},
      {type, {msg, rpbmodfun}}, {occurrence, optional},
      {opts, []}],
     [{name, linkfun}, {fnum, 9}, {rnum, 10},
      {type, {msg, rpbmodfun}}, {occurrence, optional},
      {opts, []}],
     [{name, old_vclock}, {fnum, 10}, {rnum, 11},
      {type, uint32}, {occurrence, optional}, {opts, []}],
     [{name, young_vclock}, {fnum, 11}, {rnum, 12},
      {type, uint32}, {occurrence, optional}, {opts, []}],
     [{name, big_vclock}, {fnum, 12}, {rnum, 13},
      {type, uint32}, {occurrence, optional}, {opts, []}],
     [{name, small_vclock}, {fnum, 13}, {rnum, 14},
      {type, uint32}, {occurrence, optional}, {opts, []}],
     [{name, pr}, {fnum, 14}, {rnum, 15}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, r}, {fnum, 15}, {rnum, 16}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, w}, {fnum, 16}, {rnum, 17}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, pw}, {fnum, 17}, {rnum, 18}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, dw}, {fnum, 18}, {rnum, 19}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, rw}, {fnum, 19}, {rnum, 20}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, basic_quorum}, {fnum, 20}, {rnum, 21},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, notfound_ok}, {fnum, 21}, {rnum, 22},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, backend}, {fnum, 22}, {rnum, 23}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, search}, {fnum, 23}, {rnum, 24}, {type, bool},
      {occurrence, optional}, {opts, []}],
     [{name, repl}, {fnum, 24}, {rnum, 25},
      {type, {enum, 'RpbBucketProps.RpbReplMode'}},
      {occurrence, optional}, {opts, []}],
     [{name, search_index}, {fnum, 25}, {rnum, 26},
      {type, bytes}, {occurrence, optional}, {opts, []}],
     [{name, datatype}, {fnum, 26}, {rnum, 27},
      {type, bytes}, {occurrence, optional}, {opts, []}],
     [{name, consistent}, {fnum, 27}, {rnum, 28},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, write_once}, {fnum, 28}, {rnum, 29},
      {type, bool}, {occurrence, optional}, {opts, []}]];
find_msg_def(rpbpair) ->
    [[{name, key}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, value}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbresetbucketreq) ->
    [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, type}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbsearchdoc) ->
    [[{name, fields}, {fnum, 1}, {rnum, 2},
      {type, {msg, rpbpair}}, {occurrence, repeated},
      {opts, []}]];
find_msg_def(rpbsetbuckettypereq) ->
    [[{name, type}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, props}, {fnum, 2}, {rnum, 3},
      {type, {msg, rpbbucketprops}}, {occurrence, required},
      {opts, []}]];
find_msg_def(rpbgetbuckettypereq) ->
    [[{name, type}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}]];
find_msg_def(rpbgetserverinforesp) ->
    [[{name, node}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, server_version}, {fnum, 2}, {rnum, 3},
      {type, bytes}, {occurrence, optional}, {opts, []}]];
find_msg_def(rpbsearchqueryresp) ->
    [[{name, docs}, {fnum, 1}, {rnum, 2},
      {type, {msg, rpbsearchdoc}}, {occurrence, repeated},
      {opts, []}],
     [{name, max_score}, {fnum, 2}, {rnum, 3}, {type, float},
      {occurrence, optional}, {opts, []}],
     [{name, num_found}, {fnum, 3}, {rnum, 4},
      {type, uint32}, {occurrence, optional}, {opts, []}]];
find_msg_def(rpbsearchqueryreq) ->
    [[{name, q}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, index}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, rows}, {fnum, 3}, {rnum, 4}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, start}, {fnum, 4}, {rnum, 5}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, sort}, {fnum, 5}, {rnum, 6}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, filter}, {fnum, 6}, {rnum, 7}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, df}, {fnum, 7}, {rnum, 8}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, op}, {fnum, 8}, {rnum, 9}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, fl}, {fnum, 9}, {rnum, 10}, {type, bytes},
      {occurrence, repeated}, {opts, []}],
     [{name, presort}, {fnum, 10}, {rnum, 11}, {type, bytes},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbsetbucketreq) ->
    [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, props}, {fnum, 2}, {rnum, 3},
      {type, {msg, rpbbucketprops}}, {occurrence, required},
      {opts, []}],
     [{name, type}, {fnum, 3}, {rnum, 4}, {type, bytes},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbgetbucketreq) ->
    [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, type}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbauthreq) ->
    [[{name, user}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, password}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, required}, {opts, []}]];
find_msg_def(rpbgetbucketresp) ->
    [[{name, props}, {fnum, 1}, {rnum, 2},
      {type, {msg, rpbbucketprops}}, {occurrence, required},
      {opts, []}]];
find_msg_def(rpberrorresp) ->
    [[{name, errmsg}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, errcode}, {fnum, 2}, {rnum, 3}, {type, uint32},
      {occurrence, required}, {opts, []}]];
find_msg_def(_) -> error.


find_enum_def('RpbBucketProps.RpbReplMode') ->
    [{'FALSE', 0}, {'REALTIME', 1}, {'FULLSYNC', 2},
     {'TRUE', 3}];
find_enum_def(_) -> error.


enum_symbol_by_value('RpbBucketProps.RpbReplMode',
		     Value) ->
    'enum_symbol_by_value_RpbBucketProps.RpbReplMode'(Value).


enum_value_by_symbol('RpbBucketProps.RpbReplMode',
		     Sym) ->
    'enum_value_by_symbol_RpbBucketProps.RpbReplMode'(Sym).


'enum_symbol_by_value_RpbBucketProps.RpbReplMode'(0) ->
    'FALSE';
'enum_symbol_by_value_RpbBucketProps.RpbReplMode'(1) ->
    'REALTIME';
'enum_symbol_by_value_RpbBucketProps.RpbReplMode'(2) ->
    'FULLSYNC';
'enum_symbol_by_value_RpbBucketProps.RpbReplMode'(3) ->
    'TRUE'.


'enum_value_by_symbol_RpbBucketProps.RpbReplMode'('FALSE') ->
    0;
'enum_value_by_symbol_RpbBucketProps.RpbReplMode'('REALTIME') ->
    1;
'enum_value_by_symbol_RpbBucketProps.RpbReplMode'('FULLSYNC') ->
    2;
'enum_value_by_symbol_RpbBucketProps.RpbReplMode'('TRUE') ->
    3.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "3.21.1".

gpb_version_as_list() ->
    [3,21,1].
