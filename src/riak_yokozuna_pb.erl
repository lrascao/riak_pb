%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.21.1 on {{2016,6,2},{17,24,23}}
-module(riak_yokozuna_pb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2]).
-export([merge_msgs/2]).
-export([verify_msg/1]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("riak_yokozuna_pb.hrl").



encode_msg(Msg) -> encode_msg(Msg, []).


encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg);
      false -> ok
    end,
    case Msg of
      #rpbyokozunaschemagetreq{} ->
	  e_msg_rpbyokozunaschemagetreq(Msg);
      #rpbyokozunaschema{} -> e_msg_rpbyokozunaschema(Msg);
      #rpbyokozunaschemaputreq{} ->
	  e_msg_rpbyokozunaschemaputreq(Msg);
      #rpbyokozunaschemagetresp{} ->
	  e_msg_rpbyokozunaschemagetresp(Msg);
      #rpbyokozunaindex{} -> e_msg_rpbyokozunaindex(Msg);
      #rpbyokozunaindexputreq{} ->
	  e_msg_rpbyokozunaindexputreq(Msg);
      #rpbyokozunaindexgetreq{} ->
	  e_msg_rpbyokozunaindexgetreq(Msg);
      #rpbyokozunaindexdeletereq{} ->
	  e_msg_rpbyokozunaindexdeletereq(Msg);
      #rpbyokozunaindexgetresp{} ->
	  e_msg_rpbyokozunaindexgetresp(Msg)
    end.


e_msg_rpbyokozunaschemagetreq(Msg) ->
    e_msg_rpbyokozunaschemagetreq(Msg, <<>>).


e_msg_rpbyokozunaschemagetreq(#rpbyokozunaschemagetreq{name
							   = F1},
			      Bin) ->
    e_type_bytes(F1, <<Bin/binary, 10>>).

e_msg_rpbyokozunaschema(Msg) ->
    e_msg_rpbyokozunaschema(Msg, <<>>).


e_msg_rpbyokozunaschema(#rpbyokozunaschema{name = F1,
					   content = F2},
			Bin) ->
    B1 = e_type_bytes(F1, <<Bin/binary, 10>>),
    if F2 == undefined -> B1;
       true -> e_type_bytes(F2, <<B1/binary, 18>>)
    end.

e_msg_rpbyokozunaschemaputreq(Msg) ->
    e_msg_rpbyokozunaschemaputreq(Msg, <<>>).


e_msg_rpbyokozunaschemaputreq(#rpbyokozunaschemaputreq{schema
							   = F1},
			      Bin) ->
    e_mfield_rpbyokozunaschemaputreq_schema(F1,
					    <<Bin/binary, 10>>).

e_msg_rpbyokozunaschemagetresp(Msg) ->
    e_msg_rpbyokozunaschemagetresp(Msg, <<>>).


e_msg_rpbyokozunaschemagetresp(#rpbyokozunaschemagetresp{schema
							     = F1},
			       Bin) ->
    e_mfield_rpbyokozunaschemagetresp_schema(F1,
					     <<Bin/binary, 10>>).

e_msg_rpbyokozunaindex(Msg) ->
    e_msg_rpbyokozunaindex(Msg, <<>>).


e_msg_rpbyokozunaindex(#rpbyokozunaindex{name = F1,
					 schema = F2, n_val = F3},
		       Bin) ->
    B1 = e_type_bytes(F1, <<Bin/binary, 10>>),
    B2 = if F2 == undefined -> B1;
	    true -> e_type_bytes(F2, <<B1/binary, 18>>)
	 end,
    if F3 == undefined -> B2;
       true -> e_varint(F3, <<B2/binary, 24>>)
    end.

e_msg_rpbyokozunaindexputreq(Msg) ->
    e_msg_rpbyokozunaindexputreq(Msg, <<>>).


e_msg_rpbyokozunaindexputreq(#rpbyokozunaindexputreq{index
							 = F1,
						     timeout = F2},
			     Bin) ->
    B1 = e_mfield_rpbyokozunaindexputreq_index(F1,
					       <<Bin/binary, 10>>),
    if F2 == undefined -> B1;
       true -> e_varint(F2, <<B1/binary, 16>>)
    end.

e_msg_rpbyokozunaindexgetreq(Msg) ->
    e_msg_rpbyokozunaindexgetreq(Msg, <<>>).


e_msg_rpbyokozunaindexgetreq(#rpbyokozunaindexgetreq{name
							 = F1},
			     Bin) ->
    if F1 == undefined -> Bin;
       true -> e_type_bytes(F1, <<Bin/binary, 10>>)
    end.

e_msg_rpbyokozunaindexdeletereq(Msg) ->
    e_msg_rpbyokozunaindexdeletereq(Msg, <<>>).


e_msg_rpbyokozunaindexdeletereq(#rpbyokozunaindexdeletereq{name
							       = F1},
				Bin) ->
    e_type_bytes(F1, <<Bin/binary, 10>>).

e_msg_rpbyokozunaindexgetresp(Msg) ->
    e_msg_rpbyokozunaindexgetresp(Msg, <<>>).


e_msg_rpbyokozunaindexgetresp(#rpbyokozunaindexgetresp{index
							   = F1},
			      Bin) ->
    begin
      TrF1 = id(F1),
      if TrF1 == [] -> Bin;
	 true -> e_field_rpbyokozunaindexgetresp_index(TrF1, Bin)
      end
    end.

e_mfield_rpbyokozunaschemaputreq_schema(Msg, Bin) ->
    SubBin = e_msg_rpbyokozunaschema(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rpbyokozunaschemagetresp_schema(Msg, Bin) ->
    SubBin = e_msg_rpbyokozunaschema(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rpbyokozunaindexputreq_index(Msg, Bin) ->
    SubBin = e_msg_rpbyokozunaindex(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rpbyokozunaindexgetresp_index(Msg, Bin) ->
    SubBin = e_msg_rpbyokozunaindex(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_rpbyokozunaindexgetresp_index([Elem | Rest],
				      Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_rpbyokozunaindexgetresp_index(id(Elem),
						  Bin2),
    e_field_rpbyokozunaindexgetresp_index(Rest, Bin3);
e_field_rpbyokozunaindexgetresp_index([], Bin) -> Bin.



e_type_bytes(Bytes, Bin) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    case MsgName of
      rpbyokozunaschemagetreq ->
	  d_msg_rpbyokozunaschemagetreq(Bin);
      rpbyokozunaschema -> d_msg_rpbyokozunaschema(Bin);
      rpbyokozunaschemaputreq ->
	  d_msg_rpbyokozunaschemaputreq(Bin);
      rpbyokozunaschemagetresp ->
	  d_msg_rpbyokozunaschemagetresp(Bin);
      rpbyokozunaindex -> d_msg_rpbyokozunaindex(Bin);
      rpbyokozunaindexputreq ->
	  d_msg_rpbyokozunaindexputreq(Bin);
      rpbyokozunaindexgetreq ->
	  d_msg_rpbyokozunaindexgetreq(Bin);
      rpbyokozunaindexdeletereq ->
	  d_msg_rpbyokozunaindexdeletereq(Bin);
      rpbyokozunaindexgetresp ->
	  d_msg_rpbyokozunaindexgetresp(Bin)
    end.



d_msg_rpbyokozunaschemagetreq(Bin) ->
    dfp_read_field_def_rpbyokozunaschemagetreq(Bin, 0, 0,
					       id(undefined)).

dfp_read_field_def_rpbyokozunaschemagetreq(<<10,
					     Rest/binary>>,
					   Z1, Z2, F1) ->
    d_field_rpbyokozunaschemagetreq_name(Rest, Z1, Z2, F1);
dfp_read_field_def_rpbyokozunaschemagetreq(<<>>, 0, 0,
					   F1) ->
    #rpbyokozunaschemagetreq{name = F1};
dfp_read_field_def_rpbyokozunaschemagetreq(Other, Z1,
					   Z2, F1) ->
    dg_read_field_def_rpbyokozunaschemagetreq(Other, Z1, Z2,
					      F1).

dg_read_field_def_rpbyokozunaschemagetreq(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_rpbyokozunaschemagetreq(Rest, N + 7,
					      X bsl N + Acc, F1);
dg_read_field_def_rpbyokozunaschemagetreq(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbyokozunaschemagetreq_name(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbyokozunaschemagetreq(Rest, 0, 0, F1);
	    1 -> skip_64_rpbyokozunaschemagetreq(Rest, 0, 0, F1);
	    2 ->
		skip_length_delimited_rpbyokozunaschemagetreq(Rest, 0,
							      0, F1);
	    5 -> skip_32_rpbyokozunaschemagetreq(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_rpbyokozunaschemagetreq(<<>>, 0, 0,
					  F1) ->
    #rpbyokozunaschemagetreq{name = F1}.

d_field_rpbyokozunaschemagetreq_name(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1)
    when N < 57 ->
    d_field_rpbyokozunaschemagetreq_name(Rest, N + 7,
					 X bsl N + Acc, F1);
d_field_rpbyokozunaschemagetreq_name(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbyokozunaschemagetreq(Rest2, 0, 0,
					       NewFValue).


skip_varint_rpbyokozunaschemagetreq(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1) ->
    skip_varint_rpbyokozunaschemagetreq(Rest, Z1, Z2, F1);
skip_varint_rpbyokozunaschemagetreq(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1) ->
    dfp_read_field_def_rpbyokozunaschemagetreq(Rest, Z1, Z2,
					       F1).


skip_length_delimited_rpbyokozunaschemagetreq(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_rpbyokozunaschemagetreq(Rest,
						  N + 7, X bsl N + Acc, F1);
skip_length_delimited_rpbyokozunaschemagetreq(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbyokozunaschemagetreq(Rest2, 0, 0,
					       F1).


skip_32_rpbyokozunaschemagetreq(<<_:32, Rest/binary>>,
				Z1, Z2, F1) ->
    dfp_read_field_def_rpbyokozunaschemagetreq(Rest, Z1, Z2,
					       F1).


skip_64_rpbyokozunaschemagetreq(<<_:64, Rest/binary>>,
				Z1, Z2, F1) ->
    dfp_read_field_def_rpbyokozunaschemagetreq(Rest, Z1, Z2,
					       F1).


d_msg_rpbyokozunaschema(Bin) ->
    dfp_read_field_def_rpbyokozunaschema(Bin, 0, 0,
					 id(undefined), id(undefined)).

dfp_read_field_def_rpbyokozunaschema(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, F2) ->
    d_field_rpbyokozunaschema_name(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_rpbyokozunaschema(<<18,
				       Rest/binary>>,
				     Z1, Z2, F1, F2) ->
    d_field_rpbyokozunaschema_content(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_rpbyokozunaschema(<<>>, 0, 0, F1,
				     F2) ->
    #rpbyokozunaschema{name = F1, content = F2};
dfp_read_field_def_rpbyokozunaschema(Other, Z1, Z2, F1,
				     F2) ->
    dg_read_field_def_rpbyokozunaschema(Other, Z1, Z2, F1,
					F2).

dg_read_field_def_rpbyokozunaschema(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_rpbyokozunaschema(Rest, N + 7,
					X bsl N + Acc, F1, F2);
dg_read_field_def_rpbyokozunaschema(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbyokozunaschema_name(Rest, 0, 0, F1, F2);
      18 ->
	  d_field_rpbyokozunaschema_content(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_rpbyokozunaschema(Rest, 0, 0, F1, F2);
	    1 -> skip_64_rpbyokozunaschema(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_rpbyokozunaschema(Rest, 0, 0, F1,
							F2);
	    5 -> skip_32_rpbyokozunaschema(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_rpbyokozunaschema(<<>>, 0, 0, F1,
				    F2) ->
    #rpbyokozunaschema{name = F1, content = F2}.

d_field_rpbyokozunaschema_name(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2)
    when N < 57 ->
    d_field_rpbyokozunaschema_name(Rest, N + 7,
				   X bsl N + Acc, F1, F2);
d_field_rpbyokozunaschema_name(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbyokozunaschema(Rest2, 0, 0,
					 NewFValue, F2).


d_field_rpbyokozunaschema_content(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2)
    when N < 57 ->
    d_field_rpbyokozunaschema_content(Rest, N + 7,
				      X bsl N + Acc, F1, F2);
d_field_rpbyokozunaschema_content(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbyokozunaschema(Rest2, 0, 0, F1,
					 NewFValue).


skip_varint_rpbyokozunaschema(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2) ->
    skip_varint_rpbyokozunaschema(Rest, Z1, Z2, F1, F2);
skip_varint_rpbyokozunaschema(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2) ->
    dfp_read_field_def_rpbyokozunaschema(Rest, Z1, Z2, F1,
					 F2).


skip_length_delimited_rpbyokozunaschema(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_rpbyokozunaschema(Rest, N + 7,
					    X bsl N + Acc, F1, F2);
skip_length_delimited_rpbyokozunaschema(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbyokozunaschema(Rest2, 0, 0, F1,
					 F2).


skip_32_rpbyokozunaschema(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2) ->
    dfp_read_field_def_rpbyokozunaschema(Rest, Z1, Z2, F1,
					 F2).


skip_64_rpbyokozunaschema(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2) ->
    dfp_read_field_def_rpbyokozunaschema(Rest, Z1, Z2, F1,
					 F2).


d_msg_rpbyokozunaschemaputreq(Bin) ->
    dfp_read_field_def_rpbyokozunaschemaputreq(Bin, 0, 0,
					       id(undefined)).

dfp_read_field_def_rpbyokozunaschemaputreq(<<10,
					     Rest/binary>>,
					   Z1, Z2, F1) ->
    d_field_rpbyokozunaschemaputreq_schema(Rest, Z1, Z2,
					   F1);
dfp_read_field_def_rpbyokozunaschemaputreq(<<>>, 0, 0,
					   F1) ->
    #rpbyokozunaschemaputreq{schema = F1};
dfp_read_field_def_rpbyokozunaschemaputreq(Other, Z1,
					   Z2, F1) ->
    dg_read_field_def_rpbyokozunaschemaputreq(Other, Z1, Z2,
					      F1).

dg_read_field_def_rpbyokozunaschemaputreq(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_rpbyokozunaschemaputreq(Rest, N + 7,
					      X bsl N + Acc, F1);
dg_read_field_def_rpbyokozunaschemaputreq(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbyokozunaschemaputreq_schema(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbyokozunaschemaputreq(Rest, 0, 0, F1);
	    1 -> skip_64_rpbyokozunaschemaputreq(Rest, 0, 0, F1);
	    2 ->
		skip_length_delimited_rpbyokozunaschemaputreq(Rest, 0,
							      0, F1);
	    5 -> skip_32_rpbyokozunaschemaputreq(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_rpbyokozunaschemaputreq(<<>>, 0, 0,
					  F1) ->
    #rpbyokozunaschemaputreq{schema = F1}.

d_field_rpbyokozunaschemaputreq_schema(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1)
    when N < 57 ->
    d_field_rpbyokozunaschemaputreq_schema(Rest, N + 7,
					   X bsl N + Acc, F1);
d_field_rpbyokozunaschemaputreq_schema(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_rpbyokozunaschema(Bs),
    dfp_read_field_def_rpbyokozunaschemaputreq(Rest2, 0, 0,
					       if F1 == undefined -> NewFValue;
						  true ->
						      merge_msg_rpbyokozunaschema(F1,
										  NewFValue)
					       end).


skip_varint_rpbyokozunaschemaputreq(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1) ->
    skip_varint_rpbyokozunaschemaputreq(Rest, Z1, Z2, F1);
skip_varint_rpbyokozunaschemaputreq(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1) ->
    dfp_read_field_def_rpbyokozunaschemaputreq(Rest, Z1, Z2,
					       F1).


skip_length_delimited_rpbyokozunaschemaputreq(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_rpbyokozunaschemaputreq(Rest,
						  N + 7, X bsl N + Acc, F1);
skip_length_delimited_rpbyokozunaschemaputreq(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbyokozunaschemaputreq(Rest2, 0, 0,
					       F1).


skip_32_rpbyokozunaschemaputreq(<<_:32, Rest/binary>>,
				Z1, Z2, F1) ->
    dfp_read_field_def_rpbyokozunaschemaputreq(Rest, Z1, Z2,
					       F1).


skip_64_rpbyokozunaschemaputreq(<<_:64, Rest/binary>>,
				Z1, Z2, F1) ->
    dfp_read_field_def_rpbyokozunaschemaputreq(Rest, Z1, Z2,
					       F1).


d_msg_rpbyokozunaschemagetresp(Bin) ->
    dfp_read_field_def_rpbyokozunaschemagetresp(Bin, 0, 0,
						id(undefined)).

dfp_read_field_def_rpbyokozunaschemagetresp(<<10,
					      Rest/binary>>,
					    Z1, Z2, F1) ->
    d_field_rpbyokozunaschemagetresp_schema(Rest, Z1, Z2,
					    F1);
dfp_read_field_def_rpbyokozunaschemagetresp(<<>>, 0, 0,
					    F1) ->
    #rpbyokozunaschemagetresp{schema = F1};
dfp_read_field_def_rpbyokozunaschemagetresp(Other, Z1,
					    Z2, F1) ->
    dg_read_field_def_rpbyokozunaschemagetresp(Other, Z1,
					       Z2, F1).

dg_read_field_def_rpbyokozunaschemagetresp(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_rpbyokozunaschemagetresp(Rest, N + 7,
					       X bsl N + Acc, F1);
dg_read_field_def_rpbyokozunaschemagetresp(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbyokozunaschemagetresp_schema(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbyokozunaschemagetresp(Rest, 0, 0, F1);
	    1 -> skip_64_rpbyokozunaschemagetresp(Rest, 0, 0, F1);
	    2 ->
		skip_length_delimited_rpbyokozunaschemagetresp(Rest, 0,
							       0, F1);
	    5 -> skip_32_rpbyokozunaschemagetresp(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_rpbyokozunaschemagetresp(<<>>, 0, 0,
					   F1) ->
    #rpbyokozunaschemagetresp{schema = F1}.

d_field_rpbyokozunaschemagetresp_schema(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1)
    when N < 57 ->
    d_field_rpbyokozunaschemagetresp_schema(Rest, N + 7,
					    X bsl N + Acc, F1);
d_field_rpbyokozunaschemagetresp_schema(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_rpbyokozunaschema(Bs),
    dfp_read_field_def_rpbyokozunaschemagetresp(Rest2, 0, 0,
						if F1 == undefined -> NewFValue;
						   true ->
						       merge_msg_rpbyokozunaschema(F1,
										   NewFValue)
						end).


skip_varint_rpbyokozunaschemagetresp(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1) ->
    skip_varint_rpbyokozunaschemagetresp(Rest, Z1, Z2, F1);
skip_varint_rpbyokozunaschemagetresp(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1) ->
    dfp_read_field_def_rpbyokozunaschemagetresp(Rest, Z1,
						Z2, F1).


skip_length_delimited_rpbyokozunaschemagetresp(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_rpbyokozunaschemagetresp(Rest,
						   N + 7, X bsl N + Acc, F1);
skip_length_delimited_rpbyokozunaschemagetresp(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbyokozunaschemagetresp(Rest2, 0, 0,
						F1).


skip_32_rpbyokozunaschemagetresp(<<_:32, Rest/binary>>,
				 Z1, Z2, F1) ->
    dfp_read_field_def_rpbyokozunaschemagetresp(Rest, Z1,
						Z2, F1).


skip_64_rpbyokozunaschemagetresp(<<_:64, Rest/binary>>,
				 Z1, Z2, F1) ->
    dfp_read_field_def_rpbyokozunaschemagetresp(Rest, Z1,
						Z2, F1).


d_msg_rpbyokozunaindex(Bin) ->
    dfp_read_field_def_rpbyokozunaindex(Bin, 0, 0,
					id(undefined), id(undefined),
					id(undefined)).

dfp_read_field_def_rpbyokozunaindex(<<10, Rest/binary>>,
				    Z1, Z2, F1, F2, F3) ->
    d_field_rpbyokozunaindex_name(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_rpbyokozunaindex(<<18, Rest/binary>>,
				    Z1, Z2, F1, F2, F3) ->
    d_field_rpbyokozunaindex_schema(Rest, Z1, Z2, F1, F2,
				    F3);
dfp_read_field_def_rpbyokozunaindex(<<24, Rest/binary>>,
				    Z1, Z2, F1, F2, F3) ->
    d_field_rpbyokozunaindex_n_val(Rest, Z1, Z2, F1, F2,
				   F3);
dfp_read_field_def_rpbyokozunaindex(<<>>, 0, 0, F1, F2,
				    F3) ->
    #rpbyokozunaindex{name = F1, schema = F2, n_val = F3};
dfp_read_field_def_rpbyokozunaindex(Other, Z1, Z2, F1,
				    F2, F3) ->
    dg_read_field_def_rpbyokozunaindex(Other, Z1, Z2, F1,
				       F2, F3).

dg_read_field_def_rpbyokozunaindex(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_rpbyokozunaindex(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3);
dg_read_field_def_rpbyokozunaindex(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbyokozunaindex_name(Rest, 0, 0, F1, F2, F3);
      18 ->
	  d_field_rpbyokozunaindex_schema(Rest, 0, 0, F1, F2, F3);
      24 ->
	  d_field_rpbyokozunaindex_n_val(Rest, 0, 0, F1, F2, F3);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbyokozunaindex(Rest, 0, 0, F1, F2, F3);
	    1 -> skip_64_rpbyokozunaindex(Rest, 0, 0, F1, F2, F3);
	    2 ->
		skip_length_delimited_rpbyokozunaindex(Rest, 0, 0, F1,
						       F2, F3);
	    5 -> skip_32_rpbyokozunaindex(Rest, 0, 0, F1, F2, F3)
	  end
    end;
dg_read_field_def_rpbyokozunaindex(<<>>, 0, 0, F1, F2,
				   F3) ->
    #rpbyokozunaindex{name = F1, schema = F2, n_val = F3}.

d_field_rpbyokozunaindex_name(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_rpbyokozunaindex_name(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3);
d_field_rpbyokozunaindex_name(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbyokozunaindex(Rest2, 0, 0,
					NewFValue, F2, F3).


d_field_rpbyokozunaindex_schema(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_rpbyokozunaindex_schema(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3);
d_field_rpbyokozunaindex_schema(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, _, F3) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbyokozunaindex(Rest2, 0, 0, F1,
					NewFValue, F3).


d_field_rpbyokozunaindex_n_val(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_rpbyokozunaindex_n_val(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3);
d_field_rpbyokozunaindex_n_val(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, _) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbyokozunaindex(Rest, 0, 0, F1, F2,
					NewFValue).


skip_varint_rpbyokozunaindex(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3) ->
    skip_varint_rpbyokozunaindex(Rest, Z1, Z2, F1, F2, F3);
skip_varint_rpbyokozunaindex(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_rpbyokozunaindex(Rest, Z1, Z2, F1,
					F2, F3).


skip_length_delimited_rpbyokozunaindex(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_rpbyokozunaindex(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3);
skip_length_delimited_rpbyokozunaindex(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbyokozunaindex(Rest2, 0, 0, F1, F2,
					F3).


skip_32_rpbyokozunaindex(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2, F3) ->
    dfp_read_field_def_rpbyokozunaindex(Rest, Z1, Z2, F1,
					F2, F3).


skip_64_rpbyokozunaindex(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2, F3) ->
    dfp_read_field_def_rpbyokozunaindex(Rest, Z1, Z2, F1,
					F2, F3).


d_msg_rpbyokozunaindexputreq(Bin) ->
    dfp_read_field_def_rpbyokozunaindexputreq(Bin, 0, 0,
					      id(undefined), id(undefined)).

dfp_read_field_def_rpbyokozunaindexputreq(<<10,
					    Rest/binary>>,
					  Z1, Z2, F1, F2) ->
    d_field_rpbyokozunaindexputreq_index(Rest, Z1, Z2, F1,
					 F2);
dfp_read_field_def_rpbyokozunaindexputreq(<<16,
					    Rest/binary>>,
					  Z1, Z2, F1, F2) ->
    d_field_rpbyokozunaindexputreq_timeout(Rest, Z1, Z2, F1,
					   F2);
dfp_read_field_def_rpbyokozunaindexputreq(<<>>, 0, 0,
					  F1, F2) ->
    #rpbyokozunaindexputreq{index = F1, timeout = F2};
dfp_read_field_def_rpbyokozunaindexputreq(Other, Z1, Z2,
					  F1, F2) ->
    dg_read_field_def_rpbyokozunaindexputreq(Other, Z1, Z2,
					     F1, F2).

dg_read_field_def_rpbyokozunaindexputreq(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_rpbyokozunaindexputreq(Rest, N + 7,
					     X bsl N + Acc, F1, F2);
dg_read_field_def_rpbyokozunaindexputreq(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbyokozunaindexputreq_index(Rest, 0, 0, F1,
					       F2);
      16 ->
	  d_field_rpbyokozunaindexputreq_timeout(Rest, 0, 0, F1,
						 F2);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbyokozunaindexputreq(Rest, 0, 0, F1, F2);
	    1 -> skip_64_rpbyokozunaindexputreq(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_rpbyokozunaindexputreq(Rest, 0, 0,
							     F1, F2);
	    5 -> skip_32_rpbyokozunaindexputreq(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_rpbyokozunaindexputreq(<<>>, 0, 0, F1,
					 F2) ->
    #rpbyokozunaindexputreq{index = F1, timeout = F2}.

d_field_rpbyokozunaindexputreq_index(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2)
    when N < 57 ->
    d_field_rpbyokozunaindexputreq_index(Rest, N + 7,
					 X bsl N + Acc, F1, F2);
d_field_rpbyokozunaindexputreq_index(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_rpbyokozunaindex(Bs),
    dfp_read_field_def_rpbyokozunaindexputreq(Rest2, 0, 0,
					      if F1 == undefined -> NewFValue;
						 true ->
						     merge_msg_rpbyokozunaindex(F1,
										NewFValue)
					      end,
					      F2).


d_field_rpbyokozunaindexputreq_timeout(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2)
    when N < 57 ->
    d_field_rpbyokozunaindexputreq_timeout(Rest, N + 7,
					   X bsl N + Acc, F1, F2);
d_field_rpbyokozunaindexputreq_timeout(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, _) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbyokozunaindexputreq(Rest, 0, 0,
					      F1, NewFValue).


skip_varint_rpbyokozunaindexputreq(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2) ->
    skip_varint_rpbyokozunaindexputreq(Rest, Z1, Z2, F1,
				       F2);
skip_varint_rpbyokozunaindexputreq(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2) ->
    dfp_read_field_def_rpbyokozunaindexputreq(Rest, Z1, Z2,
					      F1, F2).


skip_length_delimited_rpbyokozunaindexputreq(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_rpbyokozunaindexputreq(Rest,
						 N + 7, X bsl N + Acc, F1, F2);
skip_length_delimited_rpbyokozunaindexputreq(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbyokozunaindexputreq(Rest2, 0, 0,
					      F1, F2).


skip_32_rpbyokozunaindexputreq(<<_:32, Rest/binary>>,
			       Z1, Z2, F1, F2) ->
    dfp_read_field_def_rpbyokozunaindexputreq(Rest, Z1, Z2,
					      F1, F2).


skip_64_rpbyokozunaindexputreq(<<_:64, Rest/binary>>,
			       Z1, Z2, F1, F2) ->
    dfp_read_field_def_rpbyokozunaindexputreq(Rest, Z1, Z2,
					      F1, F2).


d_msg_rpbyokozunaindexgetreq(Bin) ->
    dfp_read_field_def_rpbyokozunaindexgetreq(Bin, 0, 0,
					      id(undefined)).

dfp_read_field_def_rpbyokozunaindexgetreq(<<10,
					    Rest/binary>>,
					  Z1, Z2, F1) ->
    d_field_rpbyokozunaindexgetreq_name(Rest, Z1, Z2, F1);
dfp_read_field_def_rpbyokozunaindexgetreq(<<>>, 0, 0,
					  F1) ->
    #rpbyokozunaindexgetreq{name = F1};
dfp_read_field_def_rpbyokozunaindexgetreq(Other, Z1, Z2,
					  F1) ->
    dg_read_field_def_rpbyokozunaindexgetreq(Other, Z1, Z2,
					     F1).

dg_read_field_def_rpbyokozunaindexgetreq(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_rpbyokozunaindexgetreq(Rest, N + 7,
					     X bsl N + Acc, F1);
dg_read_field_def_rpbyokozunaindexgetreq(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbyokozunaindexgetreq_name(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_rpbyokozunaindexgetreq(Rest, 0, 0, F1);
	    1 -> skip_64_rpbyokozunaindexgetreq(Rest, 0, 0, F1);
	    2 ->
		skip_length_delimited_rpbyokozunaindexgetreq(Rest, 0, 0,
							     F1);
	    5 -> skip_32_rpbyokozunaindexgetreq(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_rpbyokozunaindexgetreq(<<>>, 0, 0,
					 F1) ->
    #rpbyokozunaindexgetreq{name = F1}.

d_field_rpbyokozunaindexgetreq_name(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1)
    when N < 57 ->
    d_field_rpbyokozunaindexgetreq_name(Rest, N + 7,
					X bsl N + Acc, F1);
d_field_rpbyokozunaindexgetreq_name(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbyokozunaindexgetreq(Rest2, 0, 0,
					      NewFValue).


skip_varint_rpbyokozunaindexgetreq(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1) ->
    skip_varint_rpbyokozunaindexgetreq(Rest, Z1, Z2, F1);
skip_varint_rpbyokozunaindexgetreq(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1) ->
    dfp_read_field_def_rpbyokozunaindexgetreq(Rest, Z1, Z2,
					      F1).


skip_length_delimited_rpbyokozunaindexgetreq(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_rpbyokozunaindexgetreq(Rest,
						 N + 7, X bsl N + Acc, F1);
skip_length_delimited_rpbyokozunaindexgetreq(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbyokozunaindexgetreq(Rest2, 0, 0,
					      F1).


skip_32_rpbyokozunaindexgetreq(<<_:32, Rest/binary>>,
			       Z1, Z2, F1) ->
    dfp_read_field_def_rpbyokozunaindexgetreq(Rest, Z1, Z2,
					      F1).


skip_64_rpbyokozunaindexgetreq(<<_:64, Rest/binary>>,
			       Z1, Z2, F1) ->
    dfp_read_field_def_rpbyokozunaindexgetreq(Rest, Z1, Z2,
					      F1).


d_msg_rpbyokozunaindexdeletereq(Bin) ->
    dfp_read_field_def_rpbyokozunaindexdeletereq(Bin, 0, 0,
						 id(undefined)).

dfp_read_field_def_rpbyokozunaindexdeletereq(<<10,
					       Rest/binary>>,
					     Z1, Z2, F1) ->
    d_field_rpbyokozunaindexdeletereq_name(Rest, Z1, Z2,
					   F1);
dfp_read_field_def_rpbyokozunaindexdeletereq(<<>>, 0, 0,
					     F1) ->
    #rpbyokozunaindexdeletereq{name = F1};
dfp_read_field_def_rpbyokozunaindexdeletereq(Other, Z1,
					     Z2, F1) ->
    dg_read_field_def_rpbyokozunaindexdeletereq(Other, Z1,
						Z2, F1).

dg_read_field_def_rpbyokozunaindexdeletereq(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_rpbyokozunaindexdeletereq(Rest, N + 7,
						X bsl N + Acc, F1);
dg_read_field_def_rpbyokozunaindexdeletereq(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbyokozunaindexdeletereq_name(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbyokozunaindexdeletereq(Rest, 0, 0, F1);
	    1 -> skip_64_rpbyokozunaindexdeletereq(Rest, 0, 0, F1);
	    2 ->
		skip_length_delimited_rpbyokozunaindexdeletereq(Rest, 0,
								0, F1);
	    5 -> skip_32_rpbyokozunaindexdeletereq(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_rpbyokozunaindexdeletereq(<<>>, 0, 0,
					    F1) ->
    #rpbyokozunaindexdeletereq{name = F1}.

d_field_rpbyokozunaindexdeletereq_name(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1)
    when N < 57 ->
    d_field_rpbyokozunaindexdeletereq_name(Rest, N + 7,
					   X bsl N + Acc, F1);
d_field_rpbyokozunaindexdeletereq_name(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbyokozunaindexdeletereq(Rest2, 0,
						 0, NewFValue).


skip_varint_rpbyokozunaindexdeletereq(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F1) ->
    skip_varint_rpbyokozunaindexdeletereq(Rest, Z1, Z2, F1);
skip_varint_rpbyokozunaindexdeletereq(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F1) ->
    dfp_read_field_def_rpbyokozunaindexdeletereq(Rest, Z1,
						 Z2, F1).


skip_length_delimited_rpbyokozunaindexdeletereq(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_rpbyokozunaindexdeletereq(Rest,
						    N + 7, X bsl N + Acc, F1);
skip_length_delimited_rpbyokozunaindexdeletereq(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbyokozunaindexdeletereq(Rest2, 0,
						 0, F1).


skip_32_rpbyokozunaindexdeletereq(<<_:32, Rest/binary>>,
				  Z1, Z2, F1) ->
    dfp_read_field_def_rpbyokozunaindexdeletereq(Rest, Z1,
						 Z2, F1).


skip_64_rpbyokozunaindexdeletereq(<<_:64, Rest/binary>>,
				  Z1, Z2, F1) ->
    dfp_read_field_def_rpbyokozunaindexdeletereq(Rest, Z1,
						 Z2, F1).


d_msg_rpbyokozunaindexgetresp(Bin) ->
    dfp_read_field_def_rpbyokozunaindexgetresp(Bin, 0, 0,
					       id([])).

dfp_read_field_def_rpbyokozunaindexgetresp(<<10,
					     Rest/binary>>,
					   Z1, Z2, F1) ->
    d_field_rpbyokozunaindexgetresp_index(Rest, Z1, Z2, F1);
dfp_read_field_def_rpbyokozunaindexgetresp(<<>>, 0, 0,
					   F1) ->
    #rpbyokozunaindexgetresp{index = lists_reverse(F1)};
dfp_read_field_def_rpbyokozunaindexgetresp(Other, Z1,
					   Z2, F1) ->
    dg_read_field_def_rpbyokozunaindexgetresp(Other, Z1, Z2,
					      F1).

dg_read_field_def_rpbyokozunaindexgetresp(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_rpbyokozunaindexgetresp(Rest, N + 7,
					      X bsl N + Acc, F1);
dg_read_field_def_rpbyokozunaindexgetresp(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbyokozunaindexgetresp_index(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbyokozunaindexgetresp(Rest, 0, 0, F1);
	    1 -> skip_64_rpbyokozunaindexgetresp(Rest, 0, 0, F1);
	    2 ->
		skip_length_delimited_rpbyokozunaindexgetresp(Rest, 0,
							      0, F1);
	    5 -> skip_32_rpbyokozunaindexgetresp(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_rpbyokozunaindexgetresp(<<>>, 0, 0,
					  F1) ->
    #rpbyokozunaindexgetresp{index = lists_reverse(F1)}.

d_field_rpbyokozunaindexgetresp_index(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1)
    when N < 57 ->
    d_field_rpbyokozunaindexgetresp_index(Rest, N + 7,
					  X bsl N + Acc, F1);
d_field_rpbyokozunaindexgetresp_index(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_rpbyokozunaindex(Bs),
    dfp_read_field_def_rpbyokozunaindexgetresp(Rest2, 0, 0,
					       cons(NewFValue, F1)).


skip_varint_rpbyokozunaindexgetresp(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1) ->
    skip_varint_rpbyokozunaindexgetresp(Rest, Z1, Z2, F1);
skip_varint_rpbyokozunaindexgetresp(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1) ->
    dfp_read_field_def_rpbyokozunaindexgetresp(Rest, Z1, Z2,
					       F1).


skip_length_delimited_rpbyokozunaindexgetresp(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_rpbyokozunaindexgetresp(Rest,
						  N + 7, X bsl N + Acc, F1);
skip_length_delimited_rpbyokozunaindexgetresp(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbyokozunaindexgetresp(Rest2, 0, 0,
					       F1).


skip_32_rpbyokozunaindexgetresp(<<_:32, Rest/binary>>,
				Z1, Z2, F1) ->
    dfp_read_field_def_rpbyokozunaindexgetresp(Rest, Z1, Z2,
					       F1).


skip_64_rpbyokozunaindexgetresp(<<_:64, Rest/binary>>,
				Z1, Z2, F1) ->
    dfp_read_field_def_rpbyokozunaindexgetresp(Rest, Z1, Z2,
					       F1).






merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    case Prev of
      #rpbyokozunaschemagetreq{} ->
	  merge_msg_rpbyokozunaschemagetreq(Prev, New);
      #rpbyokozunaschema{} ->
	  merge_msg_rpbyokozunaschema(Prev, New);
      #rpbyokozunaschemaputreq{} ->
	  merge_msg_rpbyokozunaschemaputreq(Prev, New);
      #rpbyokozunaschemagetresp{} ->
	  merge_msg_rpbyokozunaschemagetresp(Prev, New);
      #rpbyokozunaindex{} ->
	  merge_msg_rpbyokozunaindex(Prev, New);
      #rpbyokozunaindexputreq{} ->
	  merge_msg_rpbyokozunaindexputreq(Prev, New);
      #rpbyokozunaindexgetreq{} ->
	  merge_msg_rpbyokozunaindexgetreq(Prev, New);
      #rpbyokozunaindexdeletereq{} ->
	  merge_msg_rpbyokozunaindexdeletereq(Prev, New);
      #rpbyokozunaindexgetresp{} ->
	  merge_msg_rpbyokozunaindexgetresp(Prev, New)
    end.

merge_msg_rpbyokozunaschemagetreq(#rpbyokozunaschemagetreq{name
							       = PFname},
				  #rpbyokozunaschemagetreq{name = NFname}) ->
    #rpbyokozunaschemagetreq{name =
				 if NFname =:= undefined -> PFname;
				    true -> NFname
				 end}.

merge_msg_rpbyokozunaschema(#rpbyokozunaschema{name =
						   PFname,
					       content = PFcontent},
			    #rpbyokozunaschema{name = NFname,
					       content = NFcontent}) ->
    #rpbyokozunaschema{name =
			   if NFname =:= undefined -> PFname;
			      true -> NFname
			   end,
		       content =
			   if NFcontent =:= undefined -> PFcontent;
			      true -> NFcontent
			   end}.

merge_msg_rpbyokozunaschemaputreq(#rpbyokozunaschemaputreq{schema
							       = PFschema},
				  #rpbyokozunaschemaputreq{schema =
							       NFschema}) ->
    #rpbyokozunaschemaputreq{schema =
				 merge_msg_rpbyokozunaschema(PFschema,
							     NFschema)}.

merge_msg_rpbyokozunaschemagetresp(#rpbyokozunaschemagetresp{schema
								 = PFschema},
				   #rpbyokozunaschemagetresp{schema =
								 NFschema}) ->
    #rpbyokozunaschemagetresp{schema =
				  merge_msg_rpbyokozunaschema(PFschema,
							      NFschema)}.

merge_msg_rpbyokozunaindex(#rpbyokozunaindex{name =
						 PFname,
					     schema = PFschema,
					     n_val = PFn_val},
			   #rpbyokozunaindex{name = NFname, schema = NFschema,
					     n_val = NFn_val}) ->
    #rpbyokozunaindex{name =
			  if NFname =:= undefined -> PFname;
			     true -> NFname
			  end,
		      schema =
			  if NFschema =:= undefined -> PFschema;
			     true -> NFschema
			  end,
		      n_val =
			  if NFn_val =:= undefined -> PFn_val;
			     true -> NFn_val
			  end}.

merge_msg_rpbyokozunaindexputreq(#rpbyokozunaindexputreq{index
							     = PFindex,
							 timeout = PFtimeout},
				 #rpbyokozunaindexputreq{index = NFindex,
							 timeout =
							     NFtimeout}) ->
    #rpbyokozunaindexputreq{index =
				merge_msg_rpbyokozunaindex(PFindex, NFindex),
			    timeout =
				if NFtimeout =:= undefined -> PFtimeout;
				   true -> NFtimeout
				end}.

merge_msg_rpbyokozunaindexgetreq(#rpbyokozunaindexgetreq{name
							     = PFname},
				 #rpbyokozunaindexgetreq{name = NFname}) ->
    #rpbyokozunaindexgetreq{name =
				if NFname =:= undefined -> PFname;
				   true -> NFname
				end}.

merge_msg_rpbyokozunaindexdeletereq(#rpbyokozunaindexdeletereq{name
								   = PFname},
				    #rpbyokozunaindexdeletereq{name =
								   NFname}) ->
    #rpbyokozunaindexdeletereq{name =
				   if NFname =:= undefined -> PFname;
				      true -> NFname
				   end}.

merge_msg_rpbyokozunaindexgetresp(#rpbyokozunaindexgetresp{index
							       = PFindex},
				  #rpbyokozunaindexgetresp{index = NFindex}) ->
    #rpbyokozunaindexgetresp{index =
				 'erlang_++'(PFindex, NFindex)}.



verify_msg(Msg) ->
    case Msg of
      #rpbyokozunaschemagetreq{} ->
	  v_msg_rpbyokozunaschemagetreq(Msg,
					[rpbyokozunaschemagetreq]);
      #rpbyokozunaschema{} ->
	  v_msg_rpbyokozunaschema(Msg, [rpbyokozunaschema]);
      #rpbyokozunaschemaputreq{} ->
	  v_msg_rpbyokozunaschemaputreq(Msg,
					[rpbyokozunaschemaputreq]);
      #rpbyokozunaschemagetresp{} ->
	  v_msg_rpbyokozunaschemagetresp(Msg,
					 [rpbyokozunaschemagetresp]);
      #rpbyokozunaindex{} ->
	  v_msg_rpbyokozunaindex(Msg, [rpbyokozunaindex]);
      #rpbyokozunaindexputreq{} ->
	  v_msg_rpbyokozunaindexputreq(Msg,
				       [rpbyokozunaindexputreq]);
      #rpbyokozunaindexgetreq{} ->
	  v_msg_rpbyokozunaindexgetreq(Msg,
				       [rpbyokozunaindexgetreq]);
      #rpbyokozunaindexdeletereq{} ->
	  v_msg_rpbyokozunaindexdeletereq(Msg,
					  [rpbyokozunaindexdeletereq]);
      #rpbyokozunaindexgetresp{} ->
	  v_msg_rpbyokozunaindexgetresp(Msg,
					[rpbyokozunaindexgetresp]);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


v_msg_rpbyokozunaschemagetreq(#rpbyokozunaschemagetreq{name
							   = F1},
			      Path) ->
    v_type_bytes(F1, [name | Path]), ok.

v_msg_rpbyokozunaschema(#rpbyokozunaschema{name = F1,
					   content = F2},
			Path) ->
    v_type_bytes(F1, [name | Path]),
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [content | Path])
    end,
    ok;
v_msg_rpbyokozunaschema(X, Path) ->
    mk_type_error({expected_msg, rpbyokozunaschema}, X,
		  Path).

v_msg_rpbyokozunaschemaputreq(#rpbyokozunaschemaputreq{schema
							   = F1},
			      Path) ->
    v_msg_rpbyokozunaschema(F1, [schema | Path]), ok.

v_msg_rpbyokozunaschemagetresp(#rpbyokozunaschemagetresp{schema
							     = F1},
			       Path) ->
    v_msg_rpbyokozunaschema(F1, [schema | Path]), ok.

v_msg_rpbyokozunaindex(#rpbyokozunaindex{name = F1,
					 schema = F2, n_val = F3},
		       Path) ->
    v_type_bytes(F1, [name | Path]),
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [schema | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [n_val | Path])
    end,
    ok;
v_msg_rpbyokozunaindex(X, Path) ->
    mk_type_error({expected_msg, rpbyokozunaindex}, X,
		  Path).

v_msg_rpbyokozunaindexputreq(#rpbyokozunaindexputreq{index
							 = F1,
						     timeout = F2},
			     Path) ->
    v_msg_rpbyokozunaindex(F1, [index | Path]),
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [timeout | Path])
    end,
    ok.

v_msg_rpbyokozunaindexgetreq(#rpbyokozunaindexgetreq{name
							 = F1},
			     Path) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [name | Path])
    end,
    ok.

v_msg_rpbyokozunaindexdeletereq(#rpbyokozunaindexdeletereq{name
							       = F1},
				Path) ->
    v_type_bytes(F1, [name | Path]), ok.

v_msg_rpbyokozunaindexgetresp(#rpbyokozunaindexgetresp{index
							   = F1},
			      Path) ->
    if is_list(F1) ->
	   [v_msg_rpbyokozunaindex(Elem, [index | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, rpbyokozunaindex}},
			 F1, Path)
    end,
    ok.

v_type_uint32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({nowarn_unused_function,id/1}).
-compile({inline,id/1}).
id(X) -> X.

-compile({nowarn_unused_function,cons/2}).
-compile({inline,cons/2}).
cons(Elem, Acc) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/1}).
-compile({inline,lists_reverse/1}).
'lists_reverse'(L) -> lists:reverse(L).

-compile({nowarn_unused_function,'erlang_++'/2}).
-compile({inline,'erlang_++'/2}).
'erlang_++'(A, B) -> A ++ B.



get_msg_defs() ->
    [{{msg, rpbyokozunaschemagetreq},
      [[{name, name}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}]]},
     {{msg, rpbyokozunaschema},
      [[{name, name}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, content}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbyokozunaschemaputreq},
      [[{name, schema}, {fnum, 1}, {rnum, 2},
	{type, {msg, rpbyokozunaschema}},
	{occurrence, required}, {opts, []}]]},
     {{msg, rpbyokozunaschemagetresp},
      [[{name, schema}, {fnum, 1}, {rnum, 2},
	{type, {msg, rpbyokozunaschema}},
	{occurrence, required}, {opts, []}]]},
     {{msg, rpbyokozunaindex},
      [[{name, name}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, schema}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, n_val}, {fnum, 3}, {rnum, 4}, {type, uint32},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbyokozunaindexputreq},
      [[{name, index}, {fnum, 1}, {rnum, 2},
	{type, {msg, rpbyokozunaindex}}, {occurrence, required},
	{opts, []}],
       [{name, timeout}, {fnum, 2}, {rnum, 3}, {type, uint32},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbyokozunaindexgetreq},
      [[{name, name}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbyokozunaindexdeletereq},
      [[{name, name}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}]]},
     {{msg, rpbyokozunaindexgetresp},
      [[{name, index}, {fnum, 1}, {rnum, 2},
	{type, {msg, rpbyokozunaindex}}, {occurrence, repeated},
	{opts, []}]]}].


get_msg_names() ->
    [rpbyokozunaschemagetreq, rpbyokozunaschema,
     rpbyokozunaschemaputreq, rpbyokozunaschemagetresp,
     rpbyokozunaindex, rpbyokozunaindexputreq,
     rpbyokozunaindexgetreq, rpbyokozunaindexdeletereq,
     rpbyokozunaindexgetresp].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(rpbyokozunaschemagetreq) ->
    [[{name, name}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}]];
find_msg_def(rpbyokozunaschema) ->
    [[{name, name}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, content}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbyokozunaschemaputreq) ->
    [[{name, schema}, {fnum, 1}, {rnum, 2},
      {type, {msg, rpbyokozunaschema}},
      {occurrence, required}, {opts, []}]];
find_msg_def(rpbyokozunaschemagetresp) ->
    [[{name, schema}, {fnum, 1}, {rnum, 2},
      {type, {msg, rpbyokozunaschema}},
      {occurrence, required}, {opts, []}]];
find_msg_def(rpbyokozunaindex) ->
    [[{name, name}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, schema}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, n_val}, {fnum, 3}, {rnum, 4}, {type, uint32},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbyokozunaindexputreq) ->
    [[{name, index}, {fnum, 1}, {rnum, 2},
      {type, {msg, rpbyokozunaindex}}, {occurrence, required},
      {opts, []}],
     [{name, timeout}, {fnum, 2}, {rnum, 3}, {type, uint32},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbyokozunaindexgetreq) ->
    [[{name, name}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbyokozunaindexdeletereq) ->
    [[{name, name}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}]];
find_msg_def(rpbyokozunaindexgetresp) ->
    [[{name, index}, {fnum, 1}, {rnum, 2},
      {type, {msg, rpbyokozunaindex}}, {occurrence, repeated},
      {opts, []}]];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "3.21.1".

gpb_version_as_list() ->
    [3,21,1].
